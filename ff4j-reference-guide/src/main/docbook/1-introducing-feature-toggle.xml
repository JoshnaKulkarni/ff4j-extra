<?xml version="1.0" encoding="UTF-8"?>
<chapter  id="1" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">

	<title>Feature Toggle</title>
	
	    <!-- *********************************************************************************** -->
		<section id="1-1">
			<title>Introduction</title>
			
			<para>
			 <emphasis role="bold">Feature Toggle</emphasis> is the capacity for a system, to enable and disable features programmatically through configuration (files, databases,...) 
			 and possibly at runtime. It's performed most of the time with dedicated web console but you will see in this document that it's not the only way (command line,
			 JMX, API...). A feature represents a small unit of BUSINESS logic that impacts <emphasis role="bold">each layer</emphasis> of your applications from graphical user interfaces to data. 
			 This pattern is also known as feature flipping, feature flags, or feature bits. 
			 
			 <para><emphasis role="bold">ff4j</emphasis>, stands as feature flipping for java, and is a proposition for Feature Toggle written in Java. The following guide will
			 present you all capabilities offered by the framework. To get a shorter overview please check <ulink url="http://ff4j.org">ff4.org</ulink>. For any question 
			 related to this guide use the <ulink url="https://groups.google.com/forum/?hl=fr#!forum/ff4j">dedicated mailing list.</ulink>
			 </para>
			 
			 <figure id="figure-feature" floatstyle="center" >
			 	 <title>A feature may impacts each layer of your application</title>
      			 <mediaobject role="bordered">
      			   <imageobject condition="web" >
      			    <imagedata align="center" fileref="img/fig-01-feature.png" format="PNG" width="6cm" />
      			   </imageobject>
      			 </mediaobject>
     		  </figure>
			</para>
			
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="1-3">
			<title>Use Cases</title>
			<para>
			 Before drill down into sample codes, I would like to share with you a small overview of possible use cases. Unfortunately, most of the time Feature Flipping is seen as a trick to
			 deliver poor code into production or even technical debt but it can be much more useful and may help you during deployments, testing and can really have some added business value. Let me show you...
			<section id="1-3-1">
			  	 <title>Continuous Delivery</title>
				
				 <section id="1-3-1-0">
				   <title>Introduction</title>
				   <para>The purpose of the Continuous Delivery is to allow releasing as often as required. To achieve such demanding practice 
				   the delivery process is obviously automatic and triggered on demand. The releases are no more prepared or anticipated. For example,
				   Amazon pushes new code into production, in average, every ...... 11.6 seconds.
				   </para>
				 </section>
				   
				 <section id="1-3-1-1">
				   <title>Feature Branching vs Feature Toggle</title>
				   <para>To develop several features in the same time, you can have two approaches.</para>
				    
				     <para><emphasis role="bold">Feature Branching </emphasis></para>
				     <para>First, you can create branches in the source control system for each new feature. As releases are performed from the trunk, features under development in branches are ignored. 
                      When a feature is 'production-ready', the related branch is merged to the trunk to become part of the solution. This operation may become very complex if several releases have been 
                      performed since the initial 'fork' of the branch. Source codes can indeed be very different and leads to a lot of conflicts.
                     </para>
				     <figure id="fig-featurebanching" floatstyle="center">
      				   <title>Feature Branching</title>
      					<mediaobject role="bordered">
      					  <imageobject role="web">
      					    <imagedata align="center" fileref="img/fig-01-scm-feature-branching.png" contentwidth="10cm" />
      					  </imageobject>
      					</mediaobject>
     				 </figure>
				  
      			     <para><emphasis role="bold">Trunk-based developement</emphasis></para>
       				 <para>You can also keep on developing in the trunk. The immediate consequence is that incomplete or non-working (yet compiling) 
       				 code will be embedded into next release and pushed to production. To avoid any problem, the relevant source code is wrapped in an always-false predicate. 
       				 The value of the condition is defined through configuration. When the code is ready, the condition is set to true to start executing.
       				 </para>
       				 <para>
       				 	<emphasis role="bold">Feature Toggle is a solution to avoid complex merges and keep working on trunk.</emphasis>
       				 </para>
       				 <figure id="fig-featuretoggle" floatstyle="center">
      				  <title>Trunk-based developement</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-scm-feature-toggle.png" contentwidth="10cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
     				
				</section>
				
				<section id="1-3-1-2">
				 <title>Zero Downtime deployment</title>
				    
				     <para><emphasis role="bold">Blue/Green Deployments</emphasis></para>
				  	 <para>Blue/Green Deployment describes a way to realize "hot deployments" in distributed architectured where applications are deployed on several nodes of a cluster. 
				  	  To deploy the application you work one node after the other. You remove the node from the cluster (to avoid new incoming request), you stop it, you deploy 
				  	  the new version, restart the node and finally put back the node in the cluster. This way there are no downtime, there is always an active node to accept incoming requests.
				  	  Yes, but if you have more than 2 nodes there will be a lack of consistency between nodes. Indeed when deploying from node 3, the first and second nodes will have the new
				  	  versions but not this others. This deployment mode does not cope with major modifications like database model evolutions. Feature Toggle can be an answer. Use the same
				  	  behaviour as described but deliver you components with new features toggled off. Only when all nodes are updated, toggle the features for all nodes at once. Bonus trick : if the
				  	  new version does not work, toggle OFF the features to avoid any rollback.
				  	 </para>
				  	 <para>
       				 	<emphasis role="bold">Feature Toggle is a solution to maintain consistency between nodes when delivering in distributed system.</emphasis>
       				 </para>
				  	 <figure id="bluegreen" floatstyle="center" >
	      			 <title>Blue/Green deployment</title>
	      			 <mediaobject role="bordered">
	      			   <imageobject condition="web" >
	      			    <imagedata align="center" fileref="img/fig-01-zdd-bluegreen-deployment.png" format="PNG" width="15cm" />
	      			   </imageobject>
	      			 </mediaobject>
	     		  </figure>
				  	 
				    <para><emphasis role="bold">Canary Release</emphasis></para>
				  	<para>Canary release is the capacity to limit access to new features for only a subset of users. They may be beta-testers, premium users,
				  	 or anything you need. As an Example Amazon tests new features with their own employees before opening the services for everyone. 
				  	 It's an elegant way to get feedbacks and real production metrics.</para>
				  	 
				  	 <para>
       				 	<emphasis role="bold">Feature Toggle is a solution to grant new features on beta-testers before open the service for everyone.... without new delivery.</emphasis>
       				 </para>
       				 
				  	 <figure id="fig-canary" floatstyle="center">
      				  <title>Canary Release</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-zdd-canary-release.png" contentwidth="15cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>

				    <para><emphasis role="bold">DarkLaunch</emphasis></para>
				     <para>Dark launch is the capacity to activate features for a fixed ratio of incoming requests in order to measure technical impacts (performance, reliability....). This way there is
				     no more need of dedicated environment like pre-production to assess patches impacts. As discuss later, ff4j provides "PonderationStrategy"" to implement this use case.
				    </para>
				    <figure id="fig-dlaunch" floatstyle="center">
      				  <title>Dark Launch</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-zdd-dark-launch.png" contentwidth="15cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
				  	 
				</section>
				
				<section id="1-3-1-3"><title>Thin Client deployment</title>
					<para>
					 This clever use case should be considered when the release process is painful or the application is installed on third party devices. It has been used by Facebook 
					 for their iOS application. To publish an application on the appstore the process is always the same. Developpers package and submit the new version to apple teams which
					 MANUALLY validate it. It can take up to 48H. Once the application is published, any single user must have to download the application - again - from Apple servers.
					</para>
					
					<para> 
					 The basic idea of <emphasis role="italic">Thin Client deployment</emphasis> is to never publish new versions of the application in stores, but, instead, at startup, check 
					 current installed application against a web service and download new content if required.
					</para>
					
					<para>Feature toggle should be part of the process. When the feature is ready, it's activated in the server. Target clients (not all if you do no want to) at startup
					of their applications will get the updates.</para>
					
					<figure id="fig-tcd" floatstyle="center">
      				  <title>Thin-client deployment</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-zdd-thin-client-deployment.png" contentwidth="15cm"  />
      					</imageobject>
      				   </mediaobject>
     				</figure>
				</section>
				 
		   </section>
		   
		   <section id="1-3-2">
		   		<title>Ops and Infrastructure</title>
		   
		   		<section id="1-3-2-1"><title>Graceful Degradation</title>
				  
				  <para>The graceful degradation is a capability of a system to disable non-core functionnalities to free ressources for more important ones. As an example, on heavy load of an e-commerce
				  website, you can priorize the requests of customers which already have something in their cart, they are more likely to buy something. When a request hit the landing page, and feature toggle
				  strategy evaluates that it's not an important one, the user could be redirect to a dedicated page telling him to try later.</para>
				  
				  <para>Another example is the set up of quota. Imagine you would like to create a chatroom with 20 people. Once the quota is reached, the new users will be put in waiting room.</para>
				  
				  <figure id="fig-graceful" floatstyle="center">
      				  <title>Graceful Degradation</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-ops-graceful-degradation.png" contentwidth="10cm"  />
      					</imageobject>
      				   </mediaobject>
     				</figure>
				</section>
				
				<section id="1-3-2-2"><title>Service Catalog</title>
				  <para>A feature can be distributed among several applications. For those uses cases the features storage is a unique repository and all applications work
				  as clients. Once the administrator toggle off a feature, a whole part of IS could shut down. This pattern can be used to handle a collection of
				  services.</para>
				  
				  <figure id="fig-scatalog" floatstyle="center">
      				  <title>Service Catalog</title>
      				   <mediaobject>
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-ops-service-catalog.png" contentwidth="10cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
     				
				</section>
				
		   </section> <!-- Ops and infrastructure -->
		   
		   <section id="1-3-3"><title>Business Toggle</title>
		   	
				<section id="1-3-3-2"><title>Business Rules</title>
				  <para>The flipping of features can be driven by a set of high level rules with a decision table or decision tree. For
				  thoses cases you should implement your own logic and not only rely on a single flag. We use the term business rules 
				  but also for ff4j <varname>Flipping Strategy</varname>. The behaviour is described in the following flowchart :</para>
				  
				    <figure id="fig-01-brules" floatstyle="center">
      				  <title>Business rules</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-businessrules-flowchart.png" contentwidth="10cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
     				
				</section>
				
				<section id="1-3-3-3"><title>A/B Testing</title>
				  <para>This term is well defined in wikipedia with : "<emphasis role="italic">In marketing and business intelligence, A/B testing 
				  is jargon for a randomized experiment with two variants, A and B, which are the control and treatment in the controlled experiment. 
				  It is a form of statistical hypothesis testing with two variants leading to the technical term, Two-sample hypothesis testing, 
				  used in the field of statistics. Other terms used for this method include bucket tests and split testing but these terms have a 
				  wider applicability to more than two variants. In online settings, such as web design (especially user experience design), the 
				  goal is to identify changes to web pages that increase or maximize an outcome of interest (e.g., click-through rate for a banner 
				  advertisement). Formally the current web page is associated with the null hypothesis."</emphasis> </para>
				  
				  <para>The feature toggle pattern allows to choose between one variant or another based on a custom strategy. The target is to measure the
				  transformation rate to estimate its business added value. Monitoring capabilities are mandatory. FF4J
				  saved any access to the feature out-of-the-box. Those statistics are available any time in the <varname>EventRepository</varname>, check
				  monitoring part for more information.</para>
				  
				   <figure id="fig-abtesting" floatstyle="center">
      				  <title>A/B testing</title>
      				   <mediaobject>
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-abtesting.png" contentwidth="10cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
				</section>
				
		   </section> <!-- Business Toggle -->
			
		</section>
		
</chapter>
