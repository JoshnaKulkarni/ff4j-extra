<?xml version="1.0" encoding="UTF-8"?>
<chapter  id="1" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">

	<title>Feature Toggle</title>
	
	    <!-- *********************************************************************************** -->
		<section id="1-1">
			<title>Introduction</title>
			
			<para>
			 <emphasis role="bold">Feature Toggle</emphasis> is the capacity for a system, to enable and disable features based on configuration, if possible at runtime.
			 Statements to evaluate may be flags (boolean) but also more elaborate tests cases with complex rules. The toggling is performed through dedicate console. 
			 This pattern is also called feature flipping, feature flags, or feature bits. A feature represents a small unit of business logic which crosses every layers of 
			 applications from user interfaces to data repositories.
			 
			 <figure id="figure-feature" floatstyle="center" >
      			 <mediaobject role="bordered">
      			   <imageobject condition="web" >
      			    <imagedata align="center" fileref="img/fig-01-feature.png" format="PNG" width="6cm" />
      			   </imageobject>
      			 </mediaobject>
     		  </figure>
			</para>
			 
			 <para><emphasis role="bold">ff4j</emphasis>, stands as feature flipping for java, is a proposition of implementation writen in Java. The following guide will
			 present in details all capabilities offers by this framework. To get a short overview please check <ulink url="http://ff4j.org">ff4.org</ulink>. For any question 
			 related to this guide use the <ulink url="https://groups.google.com/forum/?hl=fr#!forum/ff4j">dedicated mailing list.</ulink>
			 </para>
			
		</section>

		<!-- *********************************************************************************** -->
		<section id="1-2">
			<title>References</title>
			
			<section id="1-2-1">
			  <title>Martin Fowler</title>
			  <para>Martin Fowler, an architect working at Thoughtworks, has written on his professional blog in 2010, an introduction to the concept.
			  The full article can be consulted <ulink url="http://martinfowler.com/bliki/FeatureToggle.html">here</ulink>. He is known in the
			  community as one father of the continuous integration. 
       		  </para>
       		  <para>He defines feature toggle as : 
       		  <emphasis role="italic"> The basic idea is to have a configuration file that defines a bunch of toggles for 
       		  various features you have pending. The running application then uses these toggles in order to decide whether or not to 
       		  show the new feature.
       		   </emphasis>
       		   <figure id="figure-mfowler" floatstyle="center" >
      			 <title>Martin Fowler reference article</title>
      			 <mediaobject role="bordered">
      			   <imageobject condition="web" >
      			    <imagedata align="center" fileref="img/fig-martinfowler.png" format="PNG" width="12cm" />
      			   </imageobject>
      			 </mediaobject>
     		  </figure>
     		  </para>
			</section>
			
			<section id="1-2-2">
			  <title>Blogs and articles</title>
			 <para>The feature toggle has been mostly promoted by the continuous delivery. Webgiants 
			  such as GAFA (Google, Amazon, Facebook, Apple) or Etsy have post quite a lot of information 
			  of their realisations.</para>
			  
     		  <table frame='all'><title>Blog references</title>
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
				<colspec colname='c1'/>
				<colspec colname='c2'/>
				<thead>
				<row>
  					<entry align="center">Title<?dbhtml bgcolor="#EEEEEE" ?><?dbfo bgcolor="#EEEEEE" ?></entry>
  					<entry align="center">Description<?dbhtml bgcolor="#EEEEEE" ?><?dbfo bgcolor="#EEEEEE" ?></entry>
				</row>
				</thead>
				<tbody>
					<row>
 					 <entry> <emphasis role="bold">Presentation on InfoQ</emphasis><?dbhtml bgcolor="#EEFFEE" ?><?dbfo bgcolor="#EEFFEE" ?></entry>
  					 <entry> <ulink url="http://www.infoq.com/presentations/Feature-Bits">http://www.infoq.com/presentations/Feature-Bits</ulink></entry>
					</row>
					<row>
 					 <entry> <emphasis role="bold">Presentation on 99Design</emphasis><?dbhtml bgcolor="#EEFFEE" ?><?dbfo bgcolor="#EEFFEE" ?></entry>
  					 <entry><ulink url="http://99designs.com/tech-blog/blog/2012/03/01/feature-flipping/">http://99designs.com/tech-blog/blog/2012/03/01/feature-flipping/ </ulink></entry>
					</row>
					<row>
 					 <entry> <emphasis role="bold">About Etsy</emphasis><?dbhtml bgcolor="#EEFFEE" ?><?dbfo bgcolor="#EEFFEE" ?></entry>
  					 <entry>This article is available <ulink url="http://codeascraft.com/2011/02/04/how-does-etsy-manage-development-and-operations/">  on codeascraft</ulink> </entry>
					</row>
					<row>
 					 <entry> <emphasis role="bold">About Flickr</emphasis><?dbhtml bgcolor="#EEFFEE" ?><?dbfo bgcolor="#EEFFEE" ?></entry>
  					 <entry><ulink url="http://code.flickr.com/blog/2009/12/02/flipping-out/">http://code.flickr.com/blog/2009/12/02/flipping-out/</ulink></entry>
					</row>
					<row>
 					 <entry> <emphasis role="bold">Octo Technology</emphasis><?dbhtml bgcolor="#EEFFEE" ?><?dbfo bgcolor="#EEFFEE" ?></entry>
  					 <entry>Introduced the concepts in their:  
       			   <ulink url="http://blog.octo.com/feature-flipping/">french article</ulink> but also in  
       			   <ulink url="http://www.octo.com/fr/publications/11-les-geants-du-web">their book.</ulink></entry>
					</row>
				</tbody>
			   </tgroup>
			 </table>

     		  <figure id="fig-octo-gdw" floatstyle="center" >
      			 <title>Giants of the web practices by Octo (fr)</title>
     		   	  <mediaobject>
      			   <imageobject role="web" >
      			    <imagedata align="center" fileref="img/fig-octo-gdw.png" contentwidth="4cm" contentdepth="7cm" />
      			   </imageobject>
      			  </mediaobject>
      			 </figure>
			</section>
			
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="1-3">
			<title>Use Cases</title>
			<section id="1-3-1">
			  	 <title>Continuous Delivery</title>
				
				 <section id="1-3-1-0">
				   <title>Definition</title>
				   <para>The purpose of the continuous delivery is to release components and softwares as often as required. The delivery process is obviously automatic 
				   and triggered on demand, eventually after each developper commit. It aims 'non-event' releases, they are no more prepared or anticipated, but performed 
				   anytime needed. For instance, Amazon pushes new code into production, in average, every 11.6 seconds.
				   </para>
				 </section>
				   
				 <section id="1-3-1-1">
				   <title>Feature Branching vs Feature Toggle</title>
				   <para>In order to develop several features in the same time yet keep up with frequent released there are 2 ways.</para>
				    
				     <para><emphasis role="bold">Feature Branching </emphasis></para>
				     <para>The first solution is to create branches in the source control system for
                      each new feature. The release is performed from sources hosted on trunk : features under development are ignored and won't be part of the build. 
                      When a feature is 'production-ready', the related branch is merged to the trunk. This operation may become very complex if several releases have been 
                      performed since the initial 'fork' of current branch. Source codes can be very different and leads to a large number of conflicts to deals with.
                     </para>
				     <figure id="fig-featurebanching" floatstyle="center">
      				   <title>Feature Branching</title>
      					<mediaobject role="bordered">
      					  <imageobject role="web">
      					    <imagedata align="center" fileref="img/fig-01-scm-feature-branching.png" contentwidth="10cm" />
      					  </imageobject>
      					</mediaobject>
     				 </figure>
				  
      			     <para><emphasis role="bold">Trunk-based developement</emphasis></para>
       				 <para>The second solution is, on the contrary, to keep on developing in the trunk. The immediate consequence is that incomplete or non-working (yet compiling) 
       				 code will be embedded in a release and pushed into production. To avoid any incidents the relevant source code is wrapped in an always-false predicate. 
       				 The value of the condition is defined through configuration. As soon as the code is ready, the condition is set to true and start executing.
       				 </para>
       				 <figure id="fig-featuretoggle" floatstyle="center">
      				  <title>Trunk-based developement</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-scm-feature-toggle.png" contentwidth="10cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
     				
				</section>
				
				<section id="1-3-1-2">
				 <title>Zero Downtime deployment</title>
				    
				     <para><emphasis role="bold">Blue/Green Deployments</emphasis></para>
				  	 <para>BlueGreen deployment is a term describing a way to perform "hot deployments" within high availability architectures. The application is deployed on several nodes of a same cluster. 
				  	  During deployment, each node, one after another, is stopped, new version of the product is released and node is restarted. There is a lack of consistency between nodes during release. 
				  	  
				  	  This deployment mode does not cope with major modifications like database model evolutions. Feature Toggle is a viable answer. The new version can be deployed on each node but let disabled.
				  	  The SQL Script will update the datamodel and, at end, toggle on expected features even in the same transaction. 
				  	 </para>
				  	 <figure id="bluegreen" floatstyle="center" >
	      			 <title>Blue/Green deployment</title>
	      			 <mediaobject role="bordered">
	      			   <imageobject condition="web" >
	      			    <imagedata align="center" fileref="img/fig-01-zdd-bluegreen-deployment.png" format="PNG" width="15cm" />
	      			   </imageobject>
	      			 </mediaobject>
	     		  </figure>
				  	 
				    <para><emphasis role="bold">Canary Release</emphasis></para>
				  	<para>Canary release is the capacity to open accesses to features for a limited subset of users. They may have specific role (beta-tester, employee...),
				  	may be located in defined place or anything you would think. Amazon, for instance, tests new features with employees before activate them to everyone. It's a way to get feedback
				  	from users AND real production metrics.
				  	console.</para>
				  	 <figure id="fig-canary" floatstyle="center">
      				  <title>Canary Release</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-zdd-canary-release.png" contentwidth="15cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>

				    <para><emphasis role="bold">DarkLaunch</emphasis></para>
				     <para>Dark launch is the capacity to activate features for a fixed ratio of incoming requests in order to measure technical impacts (performance, reliability....). This way there is
				     no more need of dedicated environment like pre-production to assess patches impacts. As discuss later, ff4j provides "PonderationStrategy"" to implement this use case.
				    </para>
				    <figure id="fig-dlaunch" floatstyle="center">
      				  <title>Dark Launch</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-zdd-dark-launch.png" contentwidth="15cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
				  	 
				</section>
				
				<section id="1-3-1-3"><title>Thin Client deployment</title>
					<para>
					 This clever use case should be considered when the release process is painful or the application is installed on third party devices. It has been used by Facebook 
					 for their iOS application. To publish an application on the appstore the process is always the same. Developpers package and submit the new version to apple teams which
					 MANUALLY validate it. It can take up to 48H. Once the application is published, any single user must have to download the application - again - from Apple servers.
					</para>
					
					<para> 
					 The basic idea of <emphasis role="italic">Thin Client deployment</emphasis> is to never publish new versions of the application in stores, but, instead, at startup, check 
					 current installed application against a web service and download new content if required.
					</para>
					
					<para>Feature toggle should be part of the process. When the feature is ready, it's activated in the server. Target clients (not all if you do no want to) at startup
					of their applications will get the updates.</para>
					
					<figure id="fig-tcd" floatstyle="center">
      				  <title>Thin-client deployment</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-zdd-thin-client-deployment.png" contentwidth="15cm"  />
      					</imageobject>
      				   </mediaobject>
     				</figure>
				</section>
				 
		   </section>
		   
		   <section id="1-3-2">
		   		<title>Ops and Infrastructure</title>
		   
		   		<section id="1-3-2-1"><title>Graceful Degradation</title>
				  
				  <para>The graceful degradation is a capability of a system to disable non-core functionnalities to free ressources for more important ones. As an example, on heavy load of an e-commerce
				  website, you can priorize the requests of customers which already have something in their cart, they are more likely to buy something. When a request hit the landing page, and feature toggle
				  strategy evaluates that it's not an important one, the user could be redirect to a dedicated page telling him to try later.</para>
				  
				  <para>Another example is the set up of quota. Imagine you would like to create a chatroom with 20 people. Once the quota is reached, the new users will be put in waiting room.</para>
				  
				  <figure id="fig-graceful" floatstyle="center">
      				  <title>Graceful Degradation</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-ops-graceful-degradation.png" contentwidth="10cm"  />
      					</imageobject>
      				   </mediaobject>
     				</figure>
				</section>
				
				<section id="1-3-2-2"><title>Service Catalog</title>
				  <para>A feature can be distributed among several applications. For those uses cases the features storage is a unique repository and all applications work
				  as clients. Once the administrator toggle off a feature, a whole part of IS could shut down. This pattern can be used to handle a collection of
				  services.</para>
				  
				  <figure id="fig-scatalog" floatstyle="center">
      				  <title>Service Catalog</title>
      				   <mediaobject>
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-ops-service-catalog.png" contentwidth="10cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
     				
				</section>
				
		   </section> <!-- Ops and infrastructure -->
		   
		   <section id="1-3-3"><title>Business Toggle</title>
		   	
				<section id="1-3-3-2"><title>Business Rules</title>
				  <para>The flipping of features can be driven by a set of high level rules with a decision table or decision tree. For
				  thoses cases you should implement your own logic and not only rely on a single flag. We use the term business rules 
				  but also for ff4j <varname>Flipping Strategy</varname>. The behaviour is described in the following flowchart :</para>
				  
				    <figure id="fig-01-brules" floatstyle="center">
      				  <title>Business rules</title>
      				   <mediaobject role="bordered">
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-businessrules-flowchart.png" contentwidth="10cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
     				
				</section>
				
				<section id="1-3-3-3"><title>A/B Testing</title>
				  <para>This term is well defined in wikipedia with : "<emphasis role="italic">In marketing and business intelligence, A/B testing 
				  is jargon for a randomized experiment with two variants, A and B, which are the control and treatment in the controlled experiment. 
				  It is a form of statistical hypothesis testing with two variants leading to the technical term, Two-sample hypothesis testing, 
				  used in the field of statistics. Other terms used for this method include bucket tests and split testing but these terms have a 
				  wider applicability to more than two variants. In online settings, such as web design (especially user experience design), the 
				  goal is to identify changes to web pages that increase or maximize an outcome of interest (e.g., click-through rate for a banner 
				  advertisement). Formally the current web page is associated with the null hypothesis."</emphasis> </para>
				  
				  <para>The feature toggle pattern allows to choose between one variant or another based on a custom strategy. The target is to measure the
				  transformation rate to estimate its business added value. Monitoring capabilities are mandatory. FF4J
				  saved any access to the feature out-of-the-box. Those statistics are available any time in the <varname>EventRepository</varname>, check
				  monitoring part for more information.</para>
				  
				   <figure id="fig-abtesting" floatstyle="center">
      				  <title>A/B testing</title>
      				   <mediaobject>
      				    <imageobject role="web">
      					  <imagedata align="center" fileref="img/fig-01-abtesting.png" contentwidth="10cm" />
      					</imageobject>
      				   </mediaobject>
     				</figure>
				</section>
				
		   </section> <!-- Business Toggle -->
			
		</section>
		
</chapter>
