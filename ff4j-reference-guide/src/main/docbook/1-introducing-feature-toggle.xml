<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="1" lang="en">

	<title>Introduction</title>
	
	    <!-- *********************************************************************************** -->
		<section id="1-1">
			<title>Definition and Principles</title>
			
			<para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
			
			
		</section>

		<!-- *********************************************************************************** -->
		<section id="1-2">
			<title>References</title>
			<para>Feature Toggle is not new new but recently, mostly due to continuous delivery concerns, it has be promoted. 
			Here we reference the core references and what has inspired the creation of ff4j.</para>
			
			<section id="1-2-1">
			  <title>Martin Fowler</title>
			  <para>One common article when dealing with Feature Toggle has been written  by 
       		  Martin Fowler on his professional blog in 2010. He is an architect working at Thoughtworks and one of the first which introduce
       		  the continuous integration. In the article he exposed the core principle but without providing advising any implementation. 
       		  The full article can be found <ulink url="http://martinfowler.com/bliki/FeatureToggle.html">here</ulink>.</para>
       		   <figure id="figure-id" floatstyle="center" >
      			 <title>Marting Fowler</title>
      			 <mediaobject>
      			   <imageobject role="web" >
      			    <imagedata align="center" fileref="img/fig-martinfowler.png" />
      			   </imageobject>
      			   <textobject ><phrase>Capture of illustration within M.Fowler reference</phrase></textobject>
      			 </mediaobject>
     		  </figure>
			</section>
			
			<section id="1-2-2">
			  <title>Web Giants Publications</title>
			 <para>As the feature toggle is mostly reintroduce by the continuous delivery mouvement, webgiants 
			  such as GAFA (Google, Amazon, Facebook, Apple) but also <ulink url="http://metsy">Etsy</ulink> 
			  detailed their realisation on their blog.</para>
			  <itemizedlist>
      			<listitem>
       			 <para>Etsy : USI - BLOG - </para>
      			</listitem>
      			<listitem>
       			 <para>Spotify : </para>
       			 </listitem>
     		  </itemizedlist>
			</section>
			
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="1-3">
			<title>Use Cases</title>
			<section id="1-3-1">
			  	 <title>Continuous Delivery</title>
				
				 <para><emphasis role="bold">Definition proposal : </emphasis>As suggested by its name, the purpose of the continuous delivery practice is to release 
				  softwares as often as required. The delivery process is automatic and triggered on demand, eventually after each developper commit. It allows 
				  'non-event' releases : They are no more prepared or anticipated, but performed anytime needed. For instance, Amazon pushes code into production 
				  in average, every 11.6 seconds.
				 </para>
				   
				 <section id="1-3-1-1">
				   <title>Feature Branching vs Feature Toggle</title>
				   <para>To be able to develop several features in the same time yet be compliant with the 
				   short-time development cycle there are 2 possibilities :
				   <itemizedlist>
      			    <listitem>
                     <para><varname>Feature Branching : </varname>The first solution is to create branches in the source control system (git, svn...) for
                     each new feature. As the release is performed from sources hosted on the trunk, features under development are ignored and won't be part of the build. 
                     When a feature is 'ready', the relateed branch and the trunk are merged. This operation can become very complex. Indeed, if several releases have be 
                     made since the initial 'fork' of the current branch, source codes can be potentially very different. This can lead to a large number of conflicts to 
                     deals with.
                     </para>
  					 <figure id="fig-featurebanching" floatstyle="center">
      					<title>Feature Branching</title>
      					<mediaobject><imageobject role="web"><imagedata align="center" fileref="img/fig-fbranching.png" /></imageobject></mediaobject>
     				</figure>
      			    </listitem>
      			    <listitem>
       				 <para><varname>Trunk-based-Development : </varname>The second solution is, on the contrary, to keep on developing in the trunk of the 
       				 source control. The direct consequence is that incomplete or non-working (yet compiling) code could be embedded in a release and pushed into production. To avoid
       				 any incidents the relevant source code is wrapped in a always-false condition. The value of the condition is related to configuration. As soon as the code is ready,
       				 the condition can be set to true and start executing. This is the first use case for feature toggling.</para>
       				  <figure id="fig-featuretoggle" floatstyle="center">
      					<title>Feature Branching</title>
      					<mediaobject><imageobject role="web"><imagedata align="center" fileref="img/fig-ftoggle.png" /></imageobject></mediaobject>
     				</figure>
      				</listitem>
     			    </itemizedlist>
				    </para>
				</section>
				
				<section id="1-3-1-2">
				 <title>Zero Downtime deployment</title>
				    
				    <section id="1-3-1-2-1"><title>DarkLaunch</title>
				     <para>here is dark launch</para>
				    </section>
				    
				  	<para>Text here</para>
				  	 <para><emphasis role="bold">Canary Release</emphasis></para>
				  	<para>Text here</para>
				  	 <para><emphasis role="bold">DN Abstraction</emphasis></para>
				  	<para>Text here</para>
				  	 <para><emphasis role="bold">Blue/Green Deployments</emphasis></para>
				  	<para>Text here</para>
				  	 <para><emphasis role="bold">DarkLaunch</emphasis></para>
				  	<para>Text here</para>
				</section>
				
				<section id="1-3-1-3"><title>Thin Client deployment</title>
					<para>Facebook use its own content downloader to override Apple application updat process</para>
				</section>
				 
		   </section> <!-- Continuous Delivery -->
		   
		   <section id="1-3-2"><title>Ops and Infrastructure</title>
		   
		   		<section id="1-3-2-1"><title>Graceful Degradation</title>
				  <para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				</section>
				
				<section id="1-3-2-2"><title>Service Catalog</title>
				  <para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				</section>
				
		   </section> <!-- Ops and infrastructure -->
		   
		   <section id="1-3-3"><title>Business Toggle</title>
		   
		   		<section id="1-3-3-1"><title>Overview</title>
				  <para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				</section>
				
				<section id="1-3-3-2"><title>Business Rules</title>
				  <para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				</section>
				
				<section id="1-3-3-3"><title>A/B Testing</title>
				  <para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				</section>
				
		   </section> <!-- Business Toggle -->
			
		</section>
		
</chapter>
