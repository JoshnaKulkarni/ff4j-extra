<?xml version="1.0" encoding="UTF-8"?>
<chapter id="3" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">

	<title>Core Concepts</title>
	
	    <!-- *********************************************************************************** -->
		<section id="3-1">
			<title>Feature Groups</title>
			<para>Features can be gathered as group. It is then possible to toggle the whole group. This capability can be 
			useful for instance, if you want to group all the "user stories" of sprint in the same release.
			</para>
			
			<itemizedlist>
      		
      		 <listitem>
       			<para>Let's create a new XML file <filename>ff4j-group.xml</filename> to illustrate</para>
    			<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;features&gt;

 &lt;feature uid="featA" description="my first feature" enable="true"&gt;
 &lt;/feature&gt;

 &lt;feature uid="featA" enable="false" /&gt;

  &lt;!-- Sample Feature Group --&gt;
  &lt;feature-group name="release-2.3"&gt;

  &lt;feature uid="users-story1" description="desc1" enable="false"&gt;
  &lt;/feature&gt;

  &lt;feature uid="users-story2" description="null" enable="false"&gt;
  &lt;/feature&gt;

 &lt;/feature-group&gt;
	
&lt;/features&gt;</programlisting>
      		 </listitem>
      		 
      		 <listitem>
       			<para>Here is a sample utilisation of groups.</para>
    			<programlisting language="java">@Test
public void myGroupTest() {

   FF4j ff4j = new FF4j("ff4j-groups.xml");

   // Check features loaded
   assertEquals(4, ff4j.getFeatures().size());
   assertTrue(ff4j.exist("featA"));
   assertTrue(ff4j.exist("users-story1"));
   assertTrue(ff4j.getStore().existGroup("release-2.3"));
   System.out.println("Features loaded OK");

   // Given
   assertFalse(ff4j.check("users-story1"));
   assertFalse(ff4j.check("users-story2"));

   // When
   ff4j.enableGroup("release-2.3");

   // Then
   assertTrue(ff4j.check("users-story1"));
   assertTrue(ff4j.check("users-story2"));

}</programlisting>
      		 </listitem>
      		 
      		  <listitem>
       			<para>You can also access to all operation dynamically through the <varname>FeatureStore</varname></para>
    			<programlisting language="java">@Test
public void workWithGroupTest() {

   // Given
   FF4j ff4j = new FF4j("ff4j-groups.xml");
   assertTrue(ff4j.exist("featA"));

   // When
   ff4j.getStore().addToGroup("featA", "new-group");

   // Then
   assertTrue(ff4j.getStore().existGroup("new-group"));
   assertTrue(ff4j.getStore().readAllGroups().contains("new-group"));

   Map&lt;String, Feature&gt; myGroup = ff4j.getStore().readGroup("new-group");
   assertTrue(myGroup.containsKey("featA"));

   // A feature can be in a single group
   // Here changing => deleting the last element of a group => deleting the group
   ff4j.getStore().addToGroup("featA", "group2");
   assertFalse(ff4j.getStore().existGroup("new-group"));
}</programlisting>

    		 </listitem>
      		
      	   </itemizedlist>
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="3-2">
			<title>Aspect Oriented Programming (AOP)</title>
			
			<section id="3-2-1">
				<title>Overview</title>
				  <para>From the beginning of this guide, we use intrusive tests statements within source code to perform flipping like in : </para>
				  <programlisting language="java">if (ff4j.check("featA")) {
  // new code
} else {
  // legacy
}</programlisting>

			<para>This approach is quite intrusive into source code. You can nested different feature toggles at you may consider to clean often your 
			code and remove obsolete features. A good alternative is to rely on <ulink url="http://en.wikipedia.org/wiki/Dependency_Injection">Dependency Injection</ulink>, 
			also called Inversion of control (ioc) to choose the correct implementation of the service at runtime.</para>
			
			<para>Ff4j provide the <varname>@Flip</varname> annotation to perform flipping on methods using AOP proxies. At runtime, the target service is proxified by the ff4j 
			component which choose an implementation instead of another using feature status (enable/disable). It leverage on Spring AOP Framework.
			</para>
			
			</section>
			
			<section id="3-2-2">
				<title>Illustrate with example</title>
				<para>In the following chapter, we modify the project created in getting started to illustrate
				flipping through aop</para>
			<itemizedlist>
			<listitem>
       			<para>Add the dependency to <filename>ff4j-aop</filename> in your project</para>
    			<programlisting language="xml">&lt;dependency&gt;
 &lt;groupId>org.ff4j&lt;/groupId&gt;
  &lt;artifactId>ff4j-aop&lt;/artifactId&gt;
  &lt;version>1.2.0&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
    		</listitem>
    		
			<listitem>
       			<para>Define a sample interface with the annotation : </para>
       			 <programlisting language="java">public interface GreetingService {

   @Flip(name="language-french", alterBean="greeting.french")
   String sayHello(String name);

}</programlisting>
			</listitem>
			
			<listitem>
       			<para>Define a first implementation, to tell hello in english </para>
       			 <programlisting language="java">@Component("greeting.english")
public class GreetingServiceEnglishImpl implements GreetingService {
    public String sayHello(String name) {
      return "Hello " + name;
    }
}</programlisting>
			</listitem>
			
			<listitem>
       			<para>Define a second implementation, to tell hello in french </para>
       			 <programlisting language="java">@Component("greeting.french")
public class GreetingServiceFrenchImpl implements GreetingService {
  public String sayHello(String name) {
    return "Bonjour " + name;
  }
}</programlisting>
			</listitem>
			
			<listitem>
       			<para>The AOP capability leverage on Spring Framework. To enable the Autoproxy, please ensure that the package <varname>org.ff4j.aop</varname> 
       			is scanned by spring at startup. The <filename>applicationContext-aop.xml</filename> should look like : </para>
       			 <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;
           
   &lt;context:component-scan base-package="org.ff4j.aop, org.ff4j.sample"/&gt;
   
  &lt;bean id="ff4j" class="org.ff4j.FF4j" &gt;
    &lt;property name="store" ref="ff4j.store.inmemory" /&gt;
  &lt;/bean&gt;

  &lt;bean id="ff4j.store.inmemory" class="org.ff4j.store.InMemoryFeatureStore" &gt;
    &lt;property name="location" value="ff4j-aop.xml" /&gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>
			</listitem>
			
			<listitem>
			<para>Create a dedicated ff4j.xml file with the feature name <varname>language-french</varname> let's say <filename>ff4j-demo-aop.xml</filename></para>
			 <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;features&gt;
 &lt;feature uid="language-french" enable="false" /&gt;
&lt;/features&gt;</programlisting>
			</listitem>
			
			
			<listitem>
			<para>Demonstrate how does it work through a test :</para>
			 <programlisting language="java">import junit.framework.Assert;

import org.ff4j.FF4j;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:*applicationContext-aop.xml")
public class FeatureFlippingThoughAopTest {

    @Autowired
    private FF4j ff4j;

    @Autowired
    @Qualifier("greeting.english")
    private GreetingService greeting;

    @Test
    public void testAOP() {
        Assert.assertTrue(greeting.sayHello("CLU").startsWith("Hello"));
        ff4j.enable("language-french");
        Assert.assertTrue(greeting.sayHello("CLU").startsWith("Bonjour"));
    }

}</programlisting>
			</listitem>
			
		</itemizedlist>
			</section>
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="3-3">
			<title>Permissions and security</title>
			
			<section id="3-3-1">
				<title>Overview</title>
				  <para>You may have to enable a feature only for a subset of your users. They are belong to a dedicated group or get a dedicated profile. 
				  With the <varname>Canary Realease</varname> pattern for instance, the feature could be activated only for beta-tester.
				  </para>
				  
				  <para>ff4j does not provideany  users/groups definition system but, instead, leverage on existing one like Spring Security or Apache Chiro. 
				  A set of permissions is defined for each feature but the permissions must already exists in the external security provider. Permissions will be checked
				  if, and only if, the feature is enabled.
				  </para>
				  
				  <figure id="fig-03-authds" floatstyle="center">
				  <title>AuthorizationManager sequence diagram</title>
				  <mediaobject role="bordered">
				   <imageobject role="web">
					<imagedata align="center" fileref="img/fig-03-sequencediagram-permissions.png" contentwidth="15cm" />
			  	  </imageobject>
				 </mediaobject>
				 </figure>
			</section>
			
			<section id="3-3-2">
				<title>AuthorizationManager</title>
				  <para>This is the class where ff4j evaluates users permissions against granted list at feature level. An implementation is available out-of-the-box to work
				  with <varname>Spring security</varname> framework. There are 2 methods to implements. The first one is retrieving current user profiles (to be tested against features ACL), and the
				  second will return a union of all permissions avaiable within the sysem. It's used in administration console to display permissions avec an editable list.</para>
				  
				  <figure id="fig-03-auth" floatstyle="center">
				  <title>AuthorizationManager UML Diagram</title>
				  <mediaobject>
				   <imageobject role="web">
					<imagedata align="center" fileref="img/fig-03-authmanager.png" contentwidth="7cm" />
			  	  </imageobject>
				 </mediaobject>
				 </figure>
			</section>
			
			<section id="3-3-3">
				<title>Illustrate through sample code</title>
				  <para>In this sample we will create a custom implementatino of <varname>AuthorizationManager</varname> which keep the list of permissions in Memory.</para>
				  
				  <itemizedlist>
					<listitem>
       					<para>There is no new extra required dependency to implement the <varname>AuthorizationManager</varname> is in the <filename>ff4j-core.jar</filename> file.
       					Here is a sample implementation.</para>
    				<programlisting language="java">public class CustomAuthorizationManager implements AuthorizationsManager {

  public static ThreadLocal&lt;String&gt; currentUserThreadLocal = new ThreadLocal&lt;String&gt;();

  private static final Map&lt;String, Set&lt;String&gt;&gt; permissions = new HashMap&lt;String, Set&lt;String&gt;&gt;();

  static {
    permissions.put("userA", new HashSet&lt;String&gt;(Arrays.asList("user", "admin", "beta")));
    permissions.put("userB", new HashSet&lt;String&gt;(Arrays.asList("user")));
    permissions.put("userC", new HashSet&lt;String&gt;(Arrays.asList("user", "beta")));
  }

  /** {@inheritDoc} */
  @Override
  public Set&lt;String&gt; getCurrentUserPermissions() {
    String currentUser = currentUserThreadLocal.get();
    return permissions.containsKey(currentUser) ? permissions.get(currentUser) : new HashSet&lt;String&gt;(); 
  }

  /** {@inheritDoc} */
  @Override
  public Set&lt;String&gt; listAllPermissions() {
    Set&lt;String> allPermissions = new HashSet&lt;String&gt;();
    for (Set&lt;String&gt; subPersmission : permissions.values()) {
      allPermissions.addAll(subPersmission);
    }
    return allPermissions;
  }

}</programlisting>
    			</listitem>
    			
    				<listitem>
       					<para>Create a <filename>ff4j.xml</filename> file with dedicated roles. 
       					A user will be able to use the <varname>sayHello</varname> feature it's enabled and if
       					he has the permission <varname>admin</varname>. In the same way a user can use <varname>sayGoodBye</varname>
       					if, and only if, he has the beta OR the user permission.  
       					</para>
    				<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration&gt;
&lt;features&gt;

	&lt;feature uid="sayHello" description="my first feature" enable="true"&gt;
		&lt;security&gt;
			&lt;role name="admin" /&gt;
		&lt;/security&gt;
		
	&lt;/feature&gt;

	&lt;feature uid="sayGoodBye" description="null" enable="true"&gt;
		&lt;security&gt;
			&lt;role name="beta" /&gt;
			&lt;role name="user" /&gt;
		&lt;/security&gt;
	&lt;/feature&gt;
	
&lt;/features&gt;</programlisting>
    				</listitem>
    				
    				<listitem>
       					<para>Here is the unit test to illustrate : </para>
       					<programlisting language="java">@Test
public void sampleSecurityTest() {

  // Create FF4J
  FF4j ff4j = new FF4j("ff4j-security.xml");
  // Add the Authorization Manager Filter
  AuthorizationsManager authManager = new CustomAuthorizationManager();
  ff4j.setAuthorizationsManager(authManager);
  
  // Given : Feature exist and enable
  assertTrue(ff4j.exist("sayHello"));
  assertTrue(ff4j.getFeature("sayHello").isEnable());

  // Unknow user does not have any permission => check is false
  CustomAuthorizationManager.currentUserThreadLocal.set("unknown-user");
  System.out.println(authManager.getCurrentUserPermissions());
  assertFalse(ff4j.check("sayHello"));

  // userB exist bit he has not role Admin
  CustomAuthorizationManager.currentUserThreadLocal.set("userB");
  System.out.println(authManager.getCurrentUserPermissions());
  assertFalse(ff4j.check("sayHello"));

  // userA is admin
  CustomAuthorizationManager.currentUserThreadLocal.set("userA");
  System.out.println(authManager.getCurrentUserPermissions());
  assertTrue(ff4j.check("sayHello"));
}</programlisting>
 			   </listitem>
    		 </itemizedlist>
			</section>
			
			<section id="3-3-4">
				<title>Working with Spring Security</title>
				  <para>Even if creating a custom <varname>AuthorizationManager</varname> is possible, you may
				  want to use a well defined security framework such as Spring Security. The support of the framework
				  is provided out-of-the-box
				  </para>
				  
				 <itemizedlist>
					<listitem>
       					<para>Add the following dependency to your <filename>pom.xml</filename> file.</para>
    				<programlisting language="xml">&lt;dependency&gt;
 &lt;groupId>org.ff4j&lt;/groupId&gt;
  &lt;artifactId>ff4j-aop&lt;/artifactId&gt;
  &lt;version>1.2.0&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
    				</listitem>
    				
    				<listitem>
       					<para>Define a spring security <varname>UserDetails</varname> implementation 
       					with the following <filename>applicationContext-security.xml</filename> file.</para>
    				<programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

  &lt;bean id="ff4j" class="org.ff4j.FF4j" &gt;
    &lt;property name="store" 					ref="ff4j.store.inmemory" /&gt;
    &lt;property name="authorizationsManager"	ref="ff4j.authorizationManager.spring" /&gt;
  &lt;/bean&gt;

  &lt;bean id="ff4j.store.inmemory" class="org.ff4j.store.InMemoryFeatureStore" &gt;
    &lt;property name="location" value="ff4j-security.xml" /&gt;
  &lt;/bean&gt;
  
  &lt;bean id="ff4j.authorizationManager.spring" class="org.ff4j.security.SpringSecurityAuthorisationManager" &gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>
    				</listitem>
    				
    				<listitem>
       					<para>The <filename>ff4j-security.xml</filename> file has not changed from last sample</para>
    				<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE configuration&gt;
&lt;features&gt;

	&lt;feature uid="sayHello" description="my first feature" enable="true"&gt;
		&lt;security&gt;
			&lt;role name="admin" /&gt;
		&lt;/security&gt;
		
	&lt;/feature&gt;

	&lt;feature uid="sayGoodBye" description="null" enable="true"&gt;
		&lt;security&gt;
			&lt;role name="beta" /&gt;
			&lt;role name="user" /&gt;
		&lt;/security&gt;
	&lt;/feature&gt;
	
&lt;/features&gt;</programlisting>
    				</listitem>
    				
    				<listitem>
    				<para>Create the following test. It instanciates a spring security context and authenticate
    				a 'userA' with the permission 'beta'.</para>
    				<programlisting language="java">@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:*applicationContext-security.xml"})
public class SampleSpringSecurityTest {

    @Autowired
    private FF4j ff4j;

    /** Security context. */
    private SecurityContext securityCtx;

    @Before
    public void setUp() throws Exception {
        securityCtx = SecurityContextHolder.getContext();

        // UserA got the roles : beta, user, admin
        List&lt;GrantedAuthority&gt; listOfRoles = new ArrayList&lt;GrantedAuthority&gt;();
        listOfRoles.add(new SimpleGrantedAuthority("beta"));
        User userA = new User("userA", "passwdA", listOfRoles);

        // Creadentials for UserA
        String userName = userA.getUsername();
        String passwd = userA.getPassword();
        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(userName, passwd, listOfRoles);
        token.setDetails(userA);

        // Create a security context with
        SecurityContext context = new SecurityContextImpl();
        context.setAuthentication(token);
        SecurityContextHolder.setContext(context);
    }

    @Test
    public void testIsAuthenticatedAndAuthorized() {

        // Given userA is authenticated in Spring
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        Assert.assertTrue(auth.isAuthenticated());

        // UserA has not expected role 'admin'
        assertTrue(ff4j.exist("sayHello"));
        assertTrue(ff4j.getFeature("sayHello").isEnable());
        assertTrue(ff4j.getFeature("sayHello").getPermissions().contains("admin"));
        assertFalse(ff4j.check("sayHello"));

        // UserA has expected role 'beta'
        assertTrue(ff4j.exist("sayGoodBye"));
        assertTrue(ff4j.getFeature("sayGoodBye").isEnable());
        assertTrue(ff4j.getFeature("sayGoodBye").getPermissions().contains("beta"));
        assertTrue(ff4j.check("sayGoodBye"));
    }

    @After
    public void tearDown() {
        SecurityContextHolder.setContext(securityCtx);
    }
    				</programlisting>
    				</listitem>
    				
    			</itemizedlist>
    			
    			<note>
    			<para>
    				The spring security context has been here created in the test, in web applications, the security Context
    				within the HTTP thread with a <varname>ThreadLocal.</varname>
    			</para>
    			</note>
				  
			</section>
			
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="3-4">
			<title>Custom Strategy</title>
			<section id="3-4-1">
				<title>FlippingStrategy Overview</title>
				  
				  <para>As introduced in the first chapter, you can enslaved the feature with your custom implementation and rules. With <varname>ff4j</varname>, once the
				  feature is enabled AND the current authenticated user is granted (if authorization manager not null) we check the avaiability of the feature with a <filename>FlippinStrategy</filename>.
				  As defined below it's set up with initial parameters. (those parameters are important for serialization later) and the test is performed within <filename>evaluate(...)</filename> method. This
				  method expected an <varname>FlippingExecutionContext</varname> which hold key/value parameters.
				  </para>
				  
				 <figure id="fig-03-strat" floatstyle="center">
				  <title>FlippingStrategy UML Diagram</title>
				  <mediaobject role="bordered">
				   <imageobject role="web">
					<imagedata align="center" fileref="img/fig-03-flippingstrategy.png" contentwidth="7cm" />
			  	  </imageobject>
				 </mediaobject>
				 </figure>
				 
				 <para>The behavior of the flipping strategy component is described in the sequence diagram below. Note that <varname>init(...)</varname> method is invoked at startup. The flipping strategies
				 are hold by the features themselves.
				 </para>
				 
				  <figure id="fig-03-stratseq" floatstyle="center">
				  <title>FlippingStrategy UML Diagram</title>
				  <mediaobject>
				   <imageobject role="web">
					<imagedata align="center" fileref="img/fig-03-sequencediagram-strategy.png" contentwidth="15cm" />
			  	  </imageobject>
				 </mediaobject>
				 </figure>
				 
			</section>
			
			<section id="3-4-3">
				<title>Sample Code</title>
				  <para>There is a bunch of strategies provided out-of-the-box but to understand the concept we propose to create our own. In this sample we will toggle feature
				  if, and only if the request is made during office time let's say 09:00 to 18:00.</para>
				  <itemizedlist>
					<listitem>
       					<para>There is no new extra required dependency to implement the <varname>FlippingStrategy</varname> is in the <filename>ff4j-core.jar</filename> file. Create the following class
       					strategy class. Note that it inherit from <varname>AbstractFlipStrategy</varname>, it's not mandatory but provide a bunch of helpers.</para>
    				<programlisting language="java">public class OfficeHoursFlippingStrategy extends AbstractFlipStrategy {

    /** Start Hour. */
    private int start = 0;

    /** Hend Hour. */
    private int end = 0;

    /** {@inheritDoc} */
    @Override
    public void init(String featureName, Map&lt;String, String&gt; initValue) {
        super.init(featureName, initValue);
        assertRequiredParameter("startDate");
        assertRequiredParameter("endDate");
        start = new Integer(initValue.get("startDate"));
        end = new Integer(initValue.get("endDate"));
    }

    /** {@inheritDoc} */
    @Override
    public boolean evaluate(String featureName, FeatureStore cuurentStore, FlippingExecutionContext executionContext) {
        int currentHour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
        return (currentHour &gt;= start &amp;&amp; currentHour &lt; end);
    }

}</programlisting>
    				</listitem>
    				
    				<listitem>
    					<para>Create a <varname>ff4j-strategy-1.xml</varname> with a feature reference our new strategy : </para>
    					<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;features&gt;

	&lt;feature uid="sayHello" enable="true" description="some desc"&gt;
		&lt;flipstrategy class="org.ff4j.sample.strategy.OfficeHoursFlippingStrategy" &gt;
			&lt;param name="startDate"&gt;9&lt;/param&gt;
			&lt;param name="endDate"&gt;18&lt;/param&gt;
		&lt;/flipstrategy&gt;
	&lt;/feature&gt;
		
&lt;/features&gt;</programlisting>
    				</listitem>
    				
    				<listitem>
    					<para>And the test to illustrate the behavior create the following unit test :</para>
    					<programlisting language="java">public class OfficeHoursFlippingStrategyTest  {
	
    // ff4j
    private final FF4j ff4j = new FF4j("ff4j-strategy-1.xml");

	@Test
    public void testCustomStrategy() throws Exception {
        int hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);
        boolean isNowOfficeTime = (hour &gt; 9) &amp; (hour &lt; 18);
        Assert.assertTrue(isNowOfficeTime == ff4j.check("sayHello"));
	}
		
}</programlisting>
    				</listitem>
    				
    			</itemizedlist>
				  
				  
			</section>
			
			
			<section id="3-4-4">
				<title>Overriding Strategy</title>
				  <para>Sometimes, even it a feature has a defined strategy, you would like to override it for a single invocation. The <varname>FF4J</varname> 
				  class provides another <varname>check()</varname> method with a flipping strategy parameter. It will overrides the existing one.
				  </para>
				  
				  <itemizedlist>
				  <listitem>
    					<para>And the test to illustrate the behavior create the following unit test :</para>
    					<programlisting language="java">
    					</programlisting>
    				</listitem>
				  
				  </itemizedlist>
				  
			</section>
			<section id="3-4-5">
				<title>Available Strategies</title>
				  <para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				  <section id="3-4-5-1">
					<title>Expression Language</title>
				  	<para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				  </section>
				  <section id="3-4-5-2">
					<title>ReleaseDate</title>
				  	<para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				  </section>
				  <section id="3-4-5-3">
					<title>ClientList</title>
				  	<para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				  </section>
				  <section id="3-4-5-4">
					<title>ServerList</title>
				  	<para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				  </section>
				   <section id="3-4-5-5">
					<title>Ponderation</title>
				  	<para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				  </section>
				  
			</section>
			
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="3-5">
			<title>Feature Stores</title>
			<para>Text here</para>
			
			<section id="3-5-1">
				<title>Introduction</title>
				<para>Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				  	<section id="3-5-1-1">
					 <title>Objectives</title>
				  	 <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				    </section>
				    <section id="3-5-1-2">
					 <title>Architecture Patterns</title>
				  	 <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				    </section>
			</section>
			
			<section id="3-5-2">
			  <title>InMemoryFeatureStore</title>
			  <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
			</section>
			
			<section id="3-5-3">
			  <title>>RDBMS FeatureStore</title>
			  <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				 <section id="3-5-3-1">
				 <title>Core JDBC</title>
				   <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				 </section>
				 <section id="3-5-3-2">
				 <title>Spring JDBC</title>
				   <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				 </section>
			</section>
			
			<section id="3-5-4">
			  <title>MongoDB FeatureStore</title>
			  <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				 <section id="3-5-4-1">
				  <title>Overview</title>
				   <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				 </section>
				 <section id="3-5-4-2">
				  <title>Sample Code</title>
				   <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				 </section>
			</section>
			
			<section id="3-5-5">
			  <title>Remote HTTP (client) FeatureStore</title>
			  <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				 <section id="3-5-5-1">
				  <title>Overview</title>
				   <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				 </section>
				 <section id="3-5-5-2">
				  <title>Sample Code</title>
				   <para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				  	 Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
				 </section>
			</section>
			
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="3-6">
			<title>Caching</title>
			<para>Text here</para>
			 
			 <section id="3-6-1">
			 	<title>Architecture Concerns</title>
				<para> Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
			 </section>
			
			  <section id="3-6-2">
				<title>Working with EHCache</title>
				<para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
			  </section>
			  
			  <section id="3-6-3">
				<title>Working with Redis</title>
				<para>Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
		      </section>
			 
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="3-7">
			<title>Monitoring</title>
			<para>Text here</para>
			
			 <section id="3-7-1">
			 	<title>Overview</title>
				<para> Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
			 </section>
			 
			  <section id="3-7-2">
			 	<title>Metrics</title>
				<para>Usage vs actions, exporter
				Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
			 </section>
			 
			 <section id="3-7-3">
			 	<title>Curves and Graphics</title>
				<para>Usage vs actions, exporter
				Status, crud, storage,Sed egestas molestie elit. Mauris urna mi, scelerisque vitae, ultrices vel, euismod vel, eros. 
				Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Pellentesque dictum felis a nisi. </para>
			 </section>
		</section>
		
</chapter>
