<?xml version="1.0" encoding="UTF-8"?>
<chapter id="2" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">

	<title>Getting Started</title>

	<!-- *********************************************************************************** -->
	<section id="2-1">
		<title>About Feature</title>
		<para>A feature represents any service, treatment, or functionality. It is identified by a unique reference name (or uid) within
		the application runtime. In a feature toggle environnement each feature has a status or a state which indicate if it's enabled or 
		not (ie: disabled). Toggling or flipping is the action to change the state of the feature.
		</para>
		
		<figure id="fig-02-features" floatstyle="center">
			<title>Feature UML Diagram</title>
			<mediaobject>
				<imageobject role="web">
					<imagedata align="center" fileref="img/fig-02-features.png" contentwidth="4cm" />
				</imageobject>
			</mediaobject>
		</figure>

	</section>

	<!-- *********************************************************************************** -->
	<section id="2-2">
		<title>Introducing FeatureStore</title>
		<para>The featureStore is the persistent unit to store the features with their attributes and status. It proposes a set of CRUD operations
		to work with features but also groups of feature or permissions on features. As detailed in further cahpters, different implementations will
		persist the data in different location such as relational database (rdbms, jdbc) , NoSQl databases (mongodb, redis), InMemory and even others.
		to </para>
		<figure id="fig-02-featurestore" floatstyle="center">
			<title>Feature Store</title>
			<mediaobject>
				<imageobject role="web">
					<imagedata align="center" fileref="img/fig-02-featurestore.png"
						contentwidth="6cm" />
				</imageobject>
			</mediaobject>
		</figure>
	</section>
		
		<!-- *********************************************************************************** -->
		<section id="2-3">
			<title>Ff4j core class</title>
			<para>It's the <emphasis role="bold">single class</emphasis> to be used in your code. It's wrapped any other components of the framework,
			 <varname>FeatureStore</varname> included). 
			</para>
			<figure id="fig-02-ff4j" floatstyle="center">
			<title>Feature Store</title>
			<mediaobject>
				<imageobject role="web">
					<imagedata align="center" fileref="img/fig-02-ff4j.png" contentwidth="12cm" />
				</imageobject>
			</mediaobject>
		</figure>
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="2-4">
			<title>First samples</title>
			<para>In this part we guide you to create a working example from scratch</para>
			
			<!-- LIST -->
    		<itemizedlist>
      		
      		 <listitem>
       			<para>Create a empty maven project</para>
      			<screen><![CDATA[mvn archetype:create -Dpackaging=jar -Dversion=1.0 -DartifactId=ff4j-simple -DgroupId=org.ff4j.sample]]></screen>
      		 </listitem>
      		
      		 <listitem>
       			<para>Declare this dependency into your <filename>pom.xml</filename> file/</para>
    			<programlisting language="xml">&lt;dependency&gt;
 &lt;groupId>org.ff4j&lt;/groupId&gt;
  &lt;artifactId>ff4j-core&lt;/artifactId&gt;
  &lt;version>1.2.0&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
      		 </listitem>
      		
      		 <listitem>
       			<para>Create the following <filename>ff4j.xml</filename> file in 'src/test/resources' folder (create it does not exist)</para>
       			<programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;features&gt;
 &lt;feature uid="sayHello"   enable="true" description="my first feature" /&gt;
 &lt;feature uid="sayGoodBye" enable="false" /&gt;
&lt;/features&gt;</programlisting>
       		 </listitem>
       		 
       		  <listitem>
       			<para>Write the following Junit test : (you may have to update junit version in your pom file)</para>
       			
       			<!-- JAVA File --> 
    <programlisting language="java">package org.ff4j.sample;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;

import org.ff4j.FF4j;
import org.junit.Test;

public class HelloWorldTest {

    @Test
    public void myFirstFF4JTest() {

        FF4j ff4j = new FF4j("ff4j.xml");
        assertEquals(2, ff4j.getFeatures().size());
        assertTrue(ff4j.exist("sayHello"));
        assertTrue(ff4j.check("sayHello"));

        // Test value at runtime
        if (ff4j.check("sayHello")) {
            // Feature ok !
            System.out.println("Hello World !");
        } else {
            fail();
        }
    }
}</programlisting>

<para>Features are loaded from xml configuration file (ff4j.xml) and registered in a store (default is in-memory).</para>

<para>If a feature does not exist, the method <varname>check(..)</varname> will raise a FeatureNotFoundException but you can change this 
behaviour by setting the autoCreate flag as true. If feature is not found the method will return false.</para>
       		 </listitem>
       		 
       		 <listitem>
       			<para>Update your unit test with this second method illustrating <varname>autoCreate</varname></para>
       			 <programlisting language="java">@Test
  public void autoCreateFeatureEnableTest() {

    // Default : store = inMemory, load features from ff4j.xml file
    FF4j ff4j = new FF4j("ff4j.xml");

    try {
        ff4j.check("autoCreatedFeature");
        fail(); // error is Expected here
    } catch(FeatureNotFoundException fnfe) {
        System.out.println("Standard behaviour");
    }

    // Change default behavior
    ff4j.autoCreate(true);

    if (!ff4j.check("autoCreatedFeature")) {
       System.out.println("Not available but code won't failed, feature created");
       assertTrue(ff4j.exist("autoCreatedFeature"));
       assertFalse(ff4j.check("autoCreatedFeature"));
    } else {
      fail();
    }
  }</programlisting>
  <para>Features can be created programmatically (for testing purposes for instance).</para>
       		 </listitem>
       		 
       		  <listitem>
       			<para>Update your unit test with this third method illustrating dynamic creation of features</para>
       			<para>Remember : Once implementing a Feature flipping pattern, services must be tested WITH and WITHOUT features enabled</para>
       			<programlisting language="java">@Test
    public void createFeatureDynamically() {

        // Initialize with empty store
        FF4j ff4j = new FF4j();

        // Dynamically register new features
        ff4j.create("f1").enable("f1");

        // Testing
        assertTrue(ff4j.exist("f1"));
        assertTrue(ff4j.check("f1"));
    }</programlisting>
       		</listitem>
       		 
    		</itemizedlist>
      
		</section>
		
		<!-- *********************************************************************************** -->
		<section id="2-5">
			<title>Integration with Spring</title>
			
			<para>The <varname>ff4j</varname> component can be easily defined as a Spring Bean.</para>
			
			<!-- LIST -->
    		<itemizedlist>
      		
      		 <listitem>
       			<para>Add Spring dependencies to your project</para>
       			<programlisting language="xml">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
  &lt;version&gt;4.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.springframework&lt;/groupId&gt;
   &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
   &lt;version&gt;4.0.5.RELEASE&lt;/version&gt;
&lt;/dependency&gt;&lt;/programlisting&gt;</programlisting>
      		 </listitem>
      		 
      		 <listitem>
      		 <para>Add the following <varname>applicationContext.xml</varname> file to your <filename>src/test/resources</filename></para>
      		 <programlisting language="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

  &lt;bean id="ff4j" class="org.ff4j.FF4j" &gt;
    &lt;property name="store" ref="ff4j.store.inmemory" /&gt;
  &lt;/bean&gt;

  &lt;bean id="ff4j.store.inmemory" class="org.ff4j.store.InMemoryFeatureStore" &gt;
    &lt;property name="location" value="ff4j.xml" /&gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>
      		 
      		 </listitem>
      		 
      		 <listitem>
      		 <para>The features are registered within in-memory store.Write the following spring-oriented test</para>
      		 <programlisting language="java">
      		 package org.ff4j.sample;

import static org.junit.Assert.fail;

import org.ff4j.FF4j;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:*applicationContext.xml"})
public class CoreSpringTest {

    @Autowired
    private FF4j ff4j;

    @Test
    public void testWithSpring() {
        // Test value at runtime
        if (ff4j.check("sayHello")) {
            // Feature ok !
            System.out.println("Hello World !");
        } else {
            fail();
        }
    }
}</programlisting>
      		 
      		 </listitem>
      		 
      		 </itemizedlist>
			
		<warning><para>Sample Warning</para></warning>
		
		<tip><para>Sample Tip</para></tip>
		
		<note><title>Note Title</title><para>Sample note</para></note>
		
	</section>
		
</chapter>
