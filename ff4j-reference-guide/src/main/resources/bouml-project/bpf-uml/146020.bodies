class FilenetP8ServicesMock
!!!213604.java!!!	getLogNames(in ctx : Credentials) : List< String >
        logger.debug("MOCK METHOD getLogNames");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        List < String > logNames = new ArrayList < String >();
        logNames.add("today");
        logNames.add("yesterday");
        logNames.add("only_my_workflow");
        return logNames;
!!!213732.java!!!	searchLogs(in userContext : Credentials, in query : LogElementQuery) : LogElement
        logger.debug("MOCK METHOD searchLogs");
        List < LogElement > logs = new ArrayList < LogElement >();
        LogElement log1 = new LogElement();
        log1.setCustomProperties(new HashMap < String, String >());
        log1.setFields(new HashMap < String, Field >());
        log1.setMessage("Task XX started by user Lambda");
        log1.setType(1);
        log1.setWobNumber("234567");
        logs.add(log1);
        LogElement log2 = new LogElement();
        log2.setCustomProperties(new HashMap < String, String >());
        log2.setFields(new HashMap < String, Field >());
        log2.setMessage("Task XX processed by Lambda");
        log2.setType(2);
        log2.setWobNumber("23432567");
        logs.add(log2);
        return logs;
!!!213860.java!!!	searchRoster(in userCredentials : Credentials, in query : RosterQuery) : TaskResultSet
        logger.debug("MOCK METHOD searchRoster");
        TaskResultSet trs = new TaskResultSet();
        trs.setPageNumber(1);
        trs.setPageTotal(1);
        trs.setTotalCount(1);
        Task task1 = new Task("12|STEPXX|NODEY");
        Map < String , Field > fields = new HashMap < String, Field >();
        fields.put("FIELD1", new Field("FIELD1", BpmFieldType.TYPE_TEXT, "VALUE1"));
        fields.put("FIELD2", new Field("FIELD2", BpmFieldType.TYPE_BOOLEAN, true));
        fields.put("FIELD3", new Field("FIELD3", BpmFieldType.TYPE_DATA, "Once upon a time a small team project..."));
        fields.put("FIELD4", new Field("FIELD4", BpmFieldType.TYPE_NUMBER, new Double(1)));
        fields.put("FIELD5", new Field("FIELD5", BpmFieldType.TYPE_DATE, new Date()));
        task1.setFields(fields);
        task1.setDeadline(new Date());
        task1.setCreatedDate(new Date());
        task1.setLocked(true);
        task1.setLocker("MisterKey");
        task1.setPriority("1");
        task1.setProcessusId("PROCX");
        task1.setProcessusName("PROCTRUC");
        task1.setQueueName("SampleQueue");
        task1.setStepName("STEPNAME");
        task1.setSuspended(false);
        task1.setUrgent(false);
        task1.setQueueFields(new HashMap < String, String >());
        FormTask ft = new FormTask();
        Map < String , FormField > fields2 = new HashMap < String, FormField >();
        fields2.put("FIELD1", new FormField(new Field("FIELD1", BpmFieldType.TYPE_TEXT, "VALUE1")));
        fields2.put("FIELD2", new FormField(new Field("FIELD2", BpmFieldType.TYPE_BOOLEAN, true)));
        fields2.put("FIELD3", new FormField(new Field("FIELD3", BpmFieldType.TYPE_DATA, "Once upon a time a ")));
        fields2.put("FIELD4", new FormField(new Field("FIELD4", BpmFieldType.TYPE_NUMBER, new Double(1))));
        fields2.put("FIELD5", new FormField(new Field("FIELD5", BpmFieldType.TYPE_DATE, new Date())));
        ft.setFields(fields2);
        ft.setCustomProperties(new HashMap < String, String >());
        task1.setForm(ft);
        LinkedHashMap < String, Task > mapTask = new LinkedHashMap < String, Task >();
        mapTask.put(task1.getTaskId(), task1);
        trs.setResults(mapTask);

        return trs;
!!!213988.java!!!	terminateWorkItem(in userCredentials : Credentials, in taskId : TaskP8) : void
        logger.debug("MOCK METHOD terminateWorkItem");
!!!214116.java!!!	transferProcessDefinition(in userCredentials : Credentials, in objStoreName : String, in wfId : String, in wfName : String) : void
        logger.debug("MOCK METHOD transferProcessDefinition");
