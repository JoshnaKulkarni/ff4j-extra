class BpmTaskServicesMock
!!!210532.java!!!	getSampleTask() : Task
    	Task task1 = new Task("12|STEPXX|NODEY");
        Map < String , Field > fields = new HashMap < String, Field >();
        fields.put("FIELD1", new Field("FIELD1", BpmFieldType.TYPE_TEXT, "VALUE1"));
        fields.put("FIELD2", new Field("FIELD2", BpmFieldType.TYPE_BOOLEAN, true));
        fields.put("FIELD3", new Field("FIELD3", BpmFieldType.TYPE_DATA, "Once upon a time a small team project..."));
        fields.put("FIELD4", new Field("FIELD4", BpmFieldType.TYPE_NUMBER, new Double(1)));
        fields.put("FIELD5", new Field("FIELD5", BpmFieldType.TYPE_DATE, new Date()));
        task1.setFields(fields);
        task1.setDeadline(new Date());
        task1.setCreatedDate(new Date());
        task1.setLocked(true);
        task1.setLocker("MisterKey");
        task1.setPriority("1");
        task1.setProcessusId("PROCX");
        task1.setProcessusName("PROCTRUC");
        task1.setQueueName("SampleQueue");
        task1.setStepName("STEPNAME");
        task1.setSuspended(false);
        task1.setUrgent(false);
        task1.setQueueFields(new HashMap < String, String >());
        FormTask ft = new FormTask();
        Map < String , FormField > fields2 = new HashMap < String, FormField >();
        fields2.put("FIELD1", new FormField(new Field("FIELD1", BpmFieldType.TYPE_TEXT, "VALUE1")));
        fields2.put("FIELD2", new FormField(new Field("FIELD2", BpmFieldType.TYPE_BOOLEAN, true)));
        fields2.put("FIELD3", new FormField(new Field("FIELD3", BpmFieldType.TYPE_DATA, "Once upon a time a small")));
        fields2.put("FIELD4", new FormField(new Field("FIELD4", BpmFieldType.TYPE_NUMBER, new Double(1))));
        fields2.put("FIELD5", new FormField(new Field("FIELD5", BpmFieldType.TYPE_DATE, new Date())));
        ft.setFields(fields2);
        ft.setCustomProperties(new HashMap < String, String >());
        task1.setForm(ft);
        return task1;
!!!210660.java!!!	load(in ctx : Credentials, in id : List< String >, in queueName : String) : Tasks
        logger.debug("MOCK METHOD load");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(id, "Param#1['id'] - you must provide at least one task id to load.");
        Assert.notNull(queueName, "Param#2['queueName'] queue name is required to know where load tasks");
        Task task = getSampleTask();
        Map < String, Task > mapTask = new HashMap < String, Task >();
        mapTask.put(task.getTaskId(), task);
        Tasks mesTasks = new Tasks(mapTask);
        Map <String, String> customProperties = new HashMap<String, String>();
        customProperties.put("KEY", "VALUE");
        mesTasks.setCustomProperties(customProperties);        
        return mesTasks;
!!!210788.java!!!	lock(in ctx : Credentials, in id : List< String >, in queueName : String) : Tasks
        logger.debug("MOCK METHOD load");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(id, "Param#1['id'] - you must provide at least one task id to load.");
        Assert.notNull(queueName, "Param#2['queueName'] queue name is required to know where load tasks");
        return load(ctx, id, queueName);
!!!210916.java!!!	reassign(in ctx : Credentials, in taskId : List< String >, in queueName : String, in destQueueName : String) : void
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(taskId, "Param#1['taskId'] - you must provide at least one task id to load.");
        Assert.notNull(queueName, "Param#2['queueName'] queue name 'from' is required");
        Assert.notNull(destQueueName, "Param#3['destQueueName'] queue name 'tp' is required");
        logger.debug("MOCK METHOD reassign");
!!!211044.java!!!	release(in ctx : Credentials, in task : List< Task >) : void
        logger.debug("MOCK METHOD release");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(task, "Param#1['task'] - you must provide at least one task to release");
!!!211172.java!!!	save(in ctx : Credentials, in task : List< Task >) : void
        logger.debug("MOCK METHOD save");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(task, "Param#1['task'] - you must provide at least one task to save");
!!!211300.java!!!	searchTasks(in ctx : Credentials, in query : TaskQuery) : TaskResultSet
        logger.debug("MOCK METHOD search");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(query, "Param#1['query'] is required, cannot search without a query");

        TaskResultSet trs = new TaskResultSet();
        trs.setCurrentQuery(query);
        trs.setPreviousPageQuery(query);
        trs.setNextPageQuery(query);
        trs.setPageNumber(1);
        trs.setPageTotal(1);
        trs.setTotalCount(1);
        
        Task task = getSampleTask();
        LinkedHashMap < String, Task > mapTasks = new LinkedHashMap < String, Task >();
        mapTasks.put(task.getTaskId(), task);
        System.out.println(mapTasks);
        trs.setResults(mapTasks);
        return trs;
!!!211428.java!!!	unlock(in ctx : Credentials, in id : List< String >, in queueName : String) : void
        logger.debug("MOCK METHOD unlock");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(id, "Param#1['taskId'] - you must provide at least one task id to unlock.");
        Assert.notNull(queueName, "Param#2['queueName'] queue name is required to know where load tasks");
!!!211556.java!!!	retrieveTask(inout ctx : Credentials, in id : String, in queueName : String, inout lock : boolean) : Task
		
		List < String > listing = new ArrayList < String > ();
		listing.add(id);
		if (lock) {
			return lock(ctx, listing, queueName).getTaskMap().values().iterator().next();
		}
		return load(ctx, listing, queueName).getTaskMap().values().iterator().next();
