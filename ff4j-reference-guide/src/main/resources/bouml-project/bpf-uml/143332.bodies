class BpmEntityManager
!!!196836.java!!!	getInstance() : BpmEntityManager
        if (instance == null) {
            instance = new BpmEntityManager();
        }
        return instance;
!!!196964.java!!!	populateProcessBean(in bean : Class< ? >, in result : Process) : Object
        try {
            if (bean.isAnnotationPresent(ProcessEntity.class)) {
                Map < String, Method > setters = processEntities.get(bean);
                if (setters == null) {
                    setters = registerProcessBean(bean);
                }
                return parseProcessBean(bean, setters, result);
            } else {
                throw new IllegalArgumentException("Bean must use annotation"
                        + "BpmProcessEntity, BpmQueueEntity or BpmTaskEntity");
            }
        } catch (Exception ie) {
            logger.error("An error occured when retrieving Process Bean", ie);
            String errMess = BpmExceptionMessageProvider.getInstance().getMessage(KEY_CANNOTMAPPING_ANNOTATION_PROCESS);
            throw new BpmEntityException(errMess, null, ie.getMessage());
        }
!!!197092.java!!!	populateTaskBean(in bean : Class< ? >, in result : Task) : Object
        try {
            if (bean.isAnnotationPresent(TaskEntity.class)) {
                Map < String, Method > setters = taskEntities.get(bean);
                if (setters == null) {
                    setters = registerTaskBean(bean);
                }
                return parseTaskBean(bean, setters, result);
            } else {
                throw new IllegalArgumentException("Bean must use annotation"
                        + "BpmProcessEntity, BpmQueueEntity or BpmTaskEntity");
            }
        } catch (Exception ie) {
            logger.error("An error occured when retrieving Task Bean", ie);
            String errMess = BpmExceptionMessageProvider.getInstance().getMessage(KEY_CANNOTMAPPING_ANNOTATION_TASK);
            throw new BpmEntityException(errMess, null, ie.getMessage());
        }
!!!197220.java!!!	parseProcessBean(in bean : Class< ? >, in beanSetters : Map< String, Method >, in result : Process) : Object
        Object returnedBean = bean.newInstance();
        for (String currentFieldName : beanSetters.keySet()) {
            Object fieldValue = null;
            if (currentFieldName.equalsIgnoreCase(TechnicalProcessFieldName.PROCESSID.getAttributeName())) {
                fieldValue = result.getProcessId();
            } else if (currentFieldName.equalsIgnoreCase(TechnicalProcessFieldName.PROCNAME.getAttributeName())) {
                fieldValue = result.getProcName();
            } else if (currentFieldName.equalsIgnoreCase(TechnicalProcessFieldName.DESCRIPTION.getAttributeName())) {
                fieldValue = result.getDescription();
            } else if (currentFieldName.equalsIgnoreCase(TechnicalProcessFieldName.ENDTIME.getAttributeName())) {
                fieldValue = result.getEndTime();
            } else if (currentFieldName.equalsIgnoreCase(TechnicalProcessFieldName.ORIGINATOR.getAttributeName())) {
                fieldValue = result.getOriginator();
            } else if (currentFieldName.equalsIgnoreCase(TechnicalProcessFieldName.STARTTIME.getAttributeName())) {
                fieldValue = result.getStartTime();
            } else {
                fieldValue = result.getFields().get(currentFieldName).getValue();
            }
            Method m = beanSetters.get(currentFieldName);
            m.invoke(returnedBean, fieldValue);
        }
        return returnedBean;
!!!197348.java!!!	parseTaskBean(in bean : Class< ? >, in beanSetters : Map< String, Method >, in result : Task) : Object
        Object returnedBean = bean.newInstance();
        for (String currentFieldName : beanSetters.keySet()) {
            Object fieldValue = result.getFields().get(currentFieldName).getValue();
            Method m = beanSetters.get(currentFieldName);
            m.invoke(returnedBean, fieldValue);
        }
        return returnedBean;
!!!197476.java!!!	registerProcessBean(in bean : Class< ? >) : Map< String, Method >
        Map < String, Method > setters = parseBean(bean);
        processEntities.put(bean, setters);
        return setters;
!!!197604.java!!!	registerTaskBean(in bean : Class< ? >) : Map< String, Method >
        Map < String, Method > setters = parseBean(bean);
        taskEntities.put(bean, setters);
        return setters;
!!!197732.java!!!	parseBean(in bean : Class< ? >) : Map< String, Method >
        Map < String, Method > setters     = new HashMap < String, Method >();
        if (accessorsMap.get(bean) == null) {
            accessorsMap.put(bean, new Accessors(bean));
        }
        java.lang.reflect.Field[] fields = bean.getDeclaredFields();
        for (java.lang.reflect.Field currentField : fields) {
            Method m = accessorsMap.get(bean).getSetters().get(currentField.getName());
            if (m == null) {
                throw new IllegalArgumentException("Bean field '" + currentField.getName()
                        + "' do not have visible setter method, could not use annotations");
            }
            if (currentField.isAnnotationPresent(BpmField.class)) {
                String bpmName = currentField.getAnnotation(BpmField.class).value();
                setters.put(bpmName.toUpperCase(), m);
            } else if (currentField.isAnnotationPresent(TechnicalProcessField.class)) {
                TechnicalProcessFieldName name = currentField.getAnnotation(TechnicalProcessField.class).value();
                setters.put(name.getAttributeName(), m);
            }
        }
        return setters;
