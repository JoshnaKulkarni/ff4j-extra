class BpmUserGroupServicesMock
!!!211684.java!!!	addUsersToGroups(in ctx : Credentials, in puserNames : List< String >, in pgroupNames : List< String >) : void
        logger.debug("MOCK METHOD addUsersToGroups");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(puserNames, "Param#1['puserNames'], you must have users to add them to group");
        Assert.notEmpty(pgroupNames, "#Param#2['pgroupNames'] , you must have groups to add users");
!!!211812.java!!!	changePassword(in ctx : Credentials, in oldPassword : String, in newPassword : String) : void
        logger.debug("MOCK METHOD changePassword");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(oldPassword, "Param#1['oldPassword'] you must knwo the old password to change it");
        Assert.notNull(newPassword, "Param#2['newPassword'] newPassword can not be null");
        Assert.isTrue(!oldPassword.equals(newPassword), "Old and new password must be different");
!!!211940.java!!!	createGroup(in ctx : Credentials, in pgroup : Group) : void
        logger.debug("MOCK METHOD createGroup");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(pgroup, "Param#1['pgroup'] - group is required");
        Assert.notNull(pgroup.getName(), "Param#1['pgroup'] - Property['name'] - groupName is required");
!!!212068.java!!!	createUser(in ctx : Credentials, in puser : User) : void
        logger.debug("MOCK METHOD createUser");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(puser, "Param#1['puser'] - user is required");
        Assert.notNull(puser.getLogin(), "Param#1['puser'] - Property['login'] - user is required");
!!!212196.java!!!	deleteGroups(in ctx : Credentials, in groupNames : List< String >) : void
        logger.debug("MOCK METHOD deleteGroups");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(groupNames, "#Param#1['pgroupNames'] , you must have groups to delete");
!!!212324.java!!!	deleteUsers(in ctx : Credentials, in userpNames : List< String >) : void
        logger.debug("MOCK METHOD deleteUsers");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(userpNames, "#Param#2['userpNames'] , you must have users to delete");
!!!212452.java!!!	isGroupExist(in ctx : Credentials, in groupName : String) : boolean
        logger.debug("MOCK METHOD isGroupExist");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(groupName, "Param#1['groupName'] - group name is required to test");
        return "GROUP".equalsIgnoreCase(groupName);
!!!212580.java!!!	isUserExist(in ctx : Credentials, in userName : String) : boolean
        logger.debug("MOCK METHOD isUserExist");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(userName, "Param#1['groupName'] - user name is required to test");
        return "USER".equalsIgnoreCase(userName);
!!!212708.java!!!	removeUsersFromGroups(in ctx : Credentials, in puserNames : List< String >, in pgroupNames : List< String >) : void
        logger.debug("MOCK METHOD removeUsersFromGroups");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(puserNames, "Param#1['puserNames'], you must have users to remove them to group");
        Assert.notEmpty(pgroupNames, "#Param#2['pgroupNames'] , you must have groups to remove users");
!!!212836.java!!!	retrieveGroup(in ctx : Credentials, in groupName : String) : Group
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(groupName, "Param#1['groupName'] - group name is required to test");
        logger.debug("MOCK METHOD retrieveGroup");
        Group group = new Group();
        group.setCustomProperties(new HashMap < String, String >());
        group.setName(groupName);
        Map < String, Field > groupFields = new HashMap < String, Field >();
        Field field1 = new Field("DESCRIPTION", BpmFieldType.TYPE_TEXT, "Sample of group");
        Field field2 = new Field("DOMAIN",      BpmFieldType.TYPE_TEXT, "Customers");
        groupFields.put(field1.getName(), field1);
        groupFields.put(field2.getName(), field2);
        group.setAttributes(groupFields);
        List < String > userNames = new ArrayList < String >();
        userNames.add("Luke Skywalker");
        userNames.add("Yann Solo");
        group.setUsers(userNames);
        return group;
!!!212964.java!!!	retrieveGroupsForUser(in ctx : Credentials, in userName : String) : List< String >
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(userName, "Param#1['userName'] - userName name is required to test");
        logger.debug("MOCK METHOD retrieveGroupsForUser");
        List < String > groupNames = new ArrayList < String >();
        groupNames.add("Resistance");
        groupNames.add("Fairy Tail");
        return groupNames;
!!!213092.java!!!	retrieveUser(in ctx : Credentials, in userName : String) : User
        logger.debug("MOCK METHOD retrieveUser");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(userName, "Param#1['userName'] - userName name is required to test");

        User mockUser = new User(userName, null, userName + "@dummy.com", "Mock User to test services");
        List < String > groupNames = new ArrayList < String >();
        groupNames.add("Resistance");
        groupNames.add("Fairy Tail");
        mockUser.setGroups(groupNames);
        return mockUser;
!!!213220.java!!!	retrieveUsersForGroup(in ctx : Credentials, in groupName : String) : List< String >
        logger.debug("MOCK METHOD retrieveUsersForGroup");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(groupName, "Param#1['groupName'] - group Name name is required to test");
        List < String > userNames = new ArrayList < String >();
        userNames.add("Luke Skywalker");
        userNames.add("Yann Solo");
        return userNames;
!!!213348.java!!!	updateGroup(in ctx : Credentials, in pgroupName : String, in attributes : Map< String, Field >) : void
        logger.debug("MOCK METHOD updateGroup");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(pgroupName, "Param#1['pgroupName'], group is required to update");
        Assert.notEmpty(attributes, "Param#1['attributes'], attribute list must not be empty");
!!!213476.java!!!	updateUser(in ctx : Credentials, in puserName : String, in attributes : Map< String, Field >) : void
        logger.debug("MOCK METHOD updateUser");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(puserName, "Param#1['puserName'], user name is required to update");
        Assert.notEmpty(attributes, "Param#1['attributes'], attribute list must not be empty");
