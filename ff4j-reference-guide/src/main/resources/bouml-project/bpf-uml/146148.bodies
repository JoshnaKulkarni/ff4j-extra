class TibcoIPEServicesMock
!!!217572.java!!!	activateProcess(in ctx : Credentials, in processName : String, in processNumber : String, in fields : Map< String, Field >, in updateActiveStep : boolean) : void
        logger.debug("MOCK METHOD activateProcess");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(processName, "Param#1['ProcessName'] is required : cannot retrieve process without its name.");
        Assert.notNull(processNumber, "#Param#2['ProcesNumber'] : cannot retrieve process without its unique id.");
        Assert.notEmpty(fields, "Param#3['fields'] must not be null nor empty");
!!!217700.java!!!	addParticipations(in ctx : Credentials, in queueName : String, in parts : List< Participation >) : void
        logger.debug("MOCK METHOD addParticipations");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(queueName, "Param#1['queueName'] is required, ");
        Assert.notEmpty(parts, "Param#2['parts'] you must provide at least one participation to add");
!!!217828.java!!!	addProcessHistoryEntry(in ctx : Credentials, in processName : String, in processNumber : String, in historyEntry : ProcessHistoryEntry) : void
        logger.debug("MOCK METHOD addProcessHistoryEntry");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(processName, "Param#1['ProcessName'] is required : cannot retrieve process without its name.");
        Assert.notNull(processNumber, "#Param#2['ProcesNumber'] : cannot retrieve process without its unique id.");
        Assert.notNull(historyEntry, "Param#3['historyEntry'] historyEntry is required");
!!!217956.java!!!	addSupervisors(in ctx : Credentials, in queueName : String, in userName : List< String >) : void
        logger.debug("MOCK METHOD addSupervisors");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(queueName, "Param#1['queueName'] is required : target to add supervisor(s)");
        Assert.notEmpty(userName, "Param#2['userName'] you must provide at least one supervisor names to add");
!!!218084.java!!!	changeUserProfile(in pcredential : Credentials, in userName : String, in profile : UserProfile) : void
        logger.debug("MOCK METHOD changeUserProfile");
!!!218212.java!!!	editQueueAttributes(in pcredential : Credentials, in queueName : String, in attributes : Map< String, Field >) : void
        logger.debug("MOCK METHOD editQueueAttributes");
!!!218340.java!!!	getUserProfile(in pcredential : Credentials, in userName : String) : UserProfile
        logger.debug("MOCK METHOD getUserProfile");
        return UserProfile.ADMIN;
!!!218468.java!!!	graftStep(in ctx : Credentials, in processName : String, in processNumber : String, in targetProc : String, in targetStep : String, in fields : HashMap< String, Field >) : void
        logger.debug("MOCK METHOD graftStep");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(processName, "Param#1['ProcessName'] is required : cannot retrieve process without its name.");
        Assert.notNull(processNumber, "#Param#2['ProcesNumber'] : cannot retrieve process without its unique id.");
        Assert.isTrue(StringUtils.hasText(targetProc), "#Param#3['targetProc'], is required and must not be empty");
        Assert.isTrue(StringUtils.hasText(targetStep), "#Param#4['targetStep'], is required and must not be empty");
        Assert.notEmpty(fields, "Param#5['targetStep'],fields must not be null nor empty");
!!!218596.java!!!	isUserAdmin(in pcredential : Credentials, in userName : String) : boolean
        logger.debug("MOCK METHOD isUserAdmin");
        return "ADMIN".equalsIgnoreCase(userName);
!!!218724.java!!!	jumpTo(in ctx : Credentials, in def : JumpToDefinition) : void
        logger.debug("MOCK METHOD jumpTo");
!!!218852.java!!!	purgeProcess(in ctx : Credentials, in processName : String, in processNumber : String) : void
        logger.debug("MOCK METHOD purgeProcess");
!!!218980.java!!!	removeParticipations(in pcredential : Credentials, in queueName : String, in parts : List< Participation >) : void
        logger.debug("MOCK METHOD removeParticipations");
!!!219108.java!!!	removeSupervisors(in ctx : Credentials, in queueName : String, in userName : List< String >) : void
        logger.debug("MOCK METHOD removeSupervisors");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(queueName, "Param#1['queueName'] is required : target to remove supervisor(s)");
        Assert.notEmpty(userName, "Param#2['userName'] you must provide at least one supervisor names to remove");
!!!219236.java!!!	resurrectProcess(in ctx : Credentials, in processName : String, in processNumber : String, in eventName : String, in fields : HashMap< String, Field >) : void
        logger.debug("MOCK METHOD resurrectProcess");
!!!219364.java!!!	retrieveCaseNumberFromCaseTag(in caseTag : String) : String
        logger.debug("MOCK METHOD retrieveCaseNumberFromCaseTag");
        return "6867";
!!!219492.java!!!	retrieveProcedureNamefromCaseTag(in caseTag : String) : String
        logger.debug("MOCK METHOD retrieveProcedureNamefromCaseTag");
        return "PROCNAME";
!!!219620.java!!!	retrieveProcedureNamefromProcTag(in procTag : String) : String
        logger.debug("MOCK METHOD retrieveProcedureNamefromProcTag");
        return "PROCENAME";
!!!219748.java!!!	retrieveQueueNamefromQueueTag(in workItempTag : String) : String
        logger.debug("MOCK METHOD retrieveQueueNamefromQueueTag");
        return "QUEUENAME";
!!!219876.java!!!	retrieveQueueTagfromWorkItemTag(in workItempTag : String) : String
        logger.debug("MOCK METHOD retrieveQueueTagfromWorkItemTag");
        return "QUEUNAME";
!!!220004.java!!!	retrieveStartStepDefinition(in ctx : Credentials, in processName : String) : StepDefinition
        logger.debug("MOCK METHOD retrieveStartStepDefinition");
        StepDefinition stepDef = new StepDefinition();
        stepDef.setCustomProperties(new HashMap < String, String >());
        stepDef.setDescription("Sample Step");
        FormTask ft = new FormTask();
        ft.setCustomProperties(new HashMap < String, String >());
        Map < String , FormField > fields = new HashMap < String, FormField >();
        fields.put("FIELD1", new FormField(new Field("FIELD1", BpmFieldType.TYPE_TEXT, "VALUE1")));
        fields.put("FIELD2", new FormField(new Field("FIELD2", BpmFieldType.TYPE_BOOLEAN, true)));
        fields.put("FIELD3", new FormField(new Field("FIELD3", BpmFieldType.TYPE_DATA, "Once upon a time ")));
        fields.put("FIELD4", new FormField(new Field("FIELD4", BpmFieldType.TYPE_NUMBER, new Double(1))));
        fields.put("FIELD5", new FormField(new Field("FIELD5", BpmFieldType.TYPE_DATE, new Date())));
        ft.setFields(fields);
        stepDef.setForm(ft);
        stepDef.setId("STEPX");
        stepDef.setName("SampleStep");
        stepDef.setType(BpmStepType.TYPE_NORMAL);
        return stepDef;
!!!220132.java!!!	retrieveSubProcessesId(in ctx : Credentials, in processName : String, in processNumber : String) : List< String >
        logger.debug("MOCK METHOD retrieveSubProcessesId");
        List < String> subProcessed = new ArrayList < String >();
        subProcessed.add("12345");
        subProcessed.add("789");
        return subProcessed;
!!!220260.java!!!	retrieveSupervisedQueues(in pcredential : Credentials) : Queue
        logger.debug("MOCK METHOD retrieveSupervisedQueues");
        Queue sampleQueue = new Queue();
        sampleQueue.setCustomProperties(new HashMap < String, String >());
        sampleQueue.setDescription("A Sample Queue");
        sampleQueue.setName("QUEUENAME");
        sampleQueue.setId("123|QUEUENAME|DUMMY");
        sampleQueue.setTaskCount(1);
        sampleQueue.setGroup(false);
        Map < String, Queue > queues = new HashMap < String, Queue >();
        queues.put(sampleQueue.getId(), sampleQueue);
        return queues;
!!!220388.java!!!	retrieveSupervisors(in ctx : Credentials, in qeueId : String) : List< String >
        logger.debug("MOCK METHOD retrieveSupervisors");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(qeueId, "Param#1['queueName'] is required : target to retrieve supervisor(s)");
        List < String > userNames = new ArrayList < String >();
        userNames.add("Luke Skywalker");
        userNames.add("Yann Solo");
        return userNames;
!!!220516.java!!!	sendProcessEvent(in ctx : Credentials, in processName : String, in processNumber : String, in eventName : String, in fields : HashMap< String, Field >, in updateOutStandingItem : boolean, in updateDeadlines : boolean) : void
        logger.debug("MOCK METHOD sendProcessEvent");
!!!220644.java!!!	startProcess(in ctx : Credentials, in processName : String, in description : String, in stepName : String, in fields : HashMap< String, Field >) : String
        logger.debug("MOCK METHOD startProcess");
        return "2456";
!!!220772.java!!!	suspendProcess(in ctx : Credentials, in processName : String, in processNumber : String, in fields : Map< String, Field >, in updateActiveSteps : boolean) : void
        logger.debug("MOCK METHOD suspendProcess");
!!!220900.java!!!	updateParticipation(in pcredential : Credentials, in queueName : String, in old : Participation, in brandNew : Participation) : void
        logger.debug("MOCK METHOD updateParticipation");
!!!221028.java!!!	retrieveActiveItems(in ctx : Credentials, in processName : String, in processNumber : String, in query : OutstandingItemIPEQuery) : OutstandingItemIPE
        logger.debug("MOCK METHOD retrieveActiveItems");
        List < OutstandingItemIPE > items = new ArrayList < OutstandingItemIPE >();
        OutstandingItemIPE osItem1 = new OutstandingItemIPE();
        osItem1.setNature(OutstandingItemIPEType.NORMAL);
        items.add(osItem1);
        OutstandingItemIPE osItem2 = new OutstandingItemIPE();
        osItem2.setNature(OutstandingItemIPEType.EVENT);
        items.add(osItem2);
        return items;
!!!221156.java!!!	retrieveFieldDefinitions(in ctx : Credentials, in processName : String) : Field
        logger.debug("MOCK METHOD retrieveFieldDefinitions");
        Map < String , Field > fields = new HashMap < String, Field >();
        fields.put("FIELD1", new Field("FIELD1", BpmFieldType.TYPE_TEXT, "VALUE1"));
        fields.put("FIELD2", new Field("FIELD2", BpmFieldType.TYPE_BOOLEAN, true));
        fields.put("FIELD3", new Field("FIELD3", BpmFieldType.TYPE_DATA, "Once upon a time a small team project..."));
        fields.put("FIELD4", new Field("FIELD4", BpmFieldType.TYPE_NUMBER, new Double(1)));
        fields.put("FIELD5", new Field("FIELD5", BpmFieldType.TYPE_DATE, new Date()));
        return fields;
!!!221284.java!!!	retrieveParticipations(in pcredential : Credentials, in queueName : String) : Participation
        logger.debug("MOCK METHOD retrieveParticipations");
        List < Participation > participations = new ArrayList < Participation >();
        Participation partic1 = new Participation();
        partic1.setCustomProperties(new HashMap < String, String >());
        partic1.setEnd(new Date());
        partic1.setStart(new Date());
        Set < String > userNames = new HashSet < String >();
        userNames.add("Luke SkyWalker");
        userNames.add("Yann Solo");
        partic1.setUserNames(userNames);
        partic1.setWeekPolicy(DayOfWeek.MONDAY.ordinal());
        participations.add(partic1);
        return participations;
