class BpmTemplate
!!!199652.java!!!	BpmTemplate(in sessionFactory : BpmConnectionFactory)
        setConnectionFactory(sessionFactory);
!!!199780.java!!!	queryForProcess(in ctx : Credentials, in procname : String, in caseNumber : String, in mapper : ProcessMapper, in loadHistory : boolean) : T
        return mapper.mapBpmProcess(getProcessServices().retrieveProcess(ctx, procname, caseNumber, loadHistory));
!!!199908.java!!!	queryForProcess(in ctx : Credentials, in procname : String, in caseNumber : String, in type : Class< ? >, in loadHistory : boolean) : T
        if (!type.isAnnotationPresent(ProcessEntity.class)) {
            throw new IllegalArgumentException("Bean must use annotation BpmProcessEntity");
        }
        com.logica.bpm.domain.Process process =
            getProcessServices().retrieveProcess(ctx, procname, caseNumber, loadHistory);
        return (T) BpmEntityManager.getInstance().populateProcessBean(type, process);
!!!200036.java!!!	queryForProcessPageableList(in ctx : Credentials, in query : ProcessQuery, in type : Class< ? >) : ParametrizedProcessResultSet
        return new ParametrizedProcessResultSet < T >(getProcessServices().searchProcesses(ctx, query), type);
!!!200164.java!!!	queryForProcessPageableList(in ctx : Credentials, in query : ProcessQuery, in mapper : ProcessMapper) : ParametrizedProcessResultSet
        return new ParametrizedProcessResultSet < T >(getProcessServices().searchProcesses(ctx, query), mapper);
!!!200292.java!!!	queryForProcessList(in ctx : Credentials, in query : ProcessQuery, in mapper : ProcessMapper) : LinkedHashMap< String,  T >
        return queryForProcessPageableList(ctx, query, mapper).getProcessResults();
!!!200420.java!!!	queryForQueue(in ctx : Credentials, in queueName : String, in mapper : QueueMapper) : Q
    	Queue queue = getQueueServices().retrieveQueue(ctx, queueName);
    	return mapper.mapBpmQueue(queue);
!!!200548.java!!!	queryForQueueList(in ctx : Credentials, in mapper : QueueMapper) : Map< String, Q >
        Map < String , Queue >  queues = getQueueServices().retrieveQueues(ctx).getQueueMap();
        Map < String , Q >      mapQ   = new HashMap < String, Q >();
        for (Map.Entry < String, Queue > element : queues.entrySet()) {
            mapQ.put(element.getKey(), mapper.mapBpmQueue(element.getValue()));
        }
        return mapQ;
!!!200676.java!!!	queryForQueueList(in ctx : Credentials, in mapper : QueueMapper, in queueNames : List< String >) : Map< String, Q >
        Map < String , Queue >  queues = getQueueServices().retrieveQueues(ctx, queueNames).getQueueMap();
        Map < String , Q >      mapQ   = new HashMap < String, Q >();
        for (Map.Entry < String, Queue > element : queues.entrySet()) {
            mapQ.put(element.getKey(), mapper.mapBpmQueue(element.getValue()));
        }
        return mapQ;
!!!200804.java!!!	queryForTasks(in ctx : Credentials, in taskIds : List< String >, in queueName : String, in mapper : TaskMapper) : Map< String , T >
        Map < String, Task > tasks = getTaskServices().load(ctx, taskIds, queueName).getTaskMap();
        Map < String, T> newTasks = new HashMap < String, T >();
        if (tasks != null) {
            for (Entry < String, Task > currentTask : tasks.entrySet()) {
                newTasks.put(currentTask.getKey(), mapper.mapBpmTask(currentTask.getValue()));
            }
        }
        return newTasks;
!!!200932.java!!!	queryForTask(in ctx : Credentials, in taskId : String, in queueName : String, in mapper : TaskMapper) : T
        return queryForTasks(ctx, Arrays.asList(new String[] {taskId}), queueName, mapper).get(taskId);
!!!201060.java!!!	queryForTasks(in ctx : Credentials, in taskIds : List< String >, in queueName : String, in type : Class< ? >) : Map< String, Object >
        Map < String, Task > tasks = getTaskServices().load(ctx, taskIds, queueName).getTaskMap();
        Map < String, Object > newTasks = new HashMap < String, Object >();
        if (tasks != null) {
            for (Entry < String, Task > currentTask : tasks.entrySet()) {
                newTasks.put(currentTask.getKey(),
                        BpmEntityManager.getInstance().populateTaskBean(type, currentTask.getValue()));
            }
        }
        return newTasks;
!!!201188.java!!!	queryForTask(in ctx : Credentials, in taskId : String, in queueName : String, in type : Class< ? >) : Object
        return queryForTasks(ctx, Arrays.asList(new String[] {taskId}), queueName, type).get(taskId);
!!!201316.java!!!	queryForTaskPageableList(in ctx : Credentials, in query : TaskQuery, in mapper : TaskMapper) : ParametrizedTaskResultSet
        return new ParametrizedTaskResultSet < T >(getTaskServices().searchTasks(ctx, query), mapper);
!!!201444.java!!!	queryForTaskList(in ctx : Credentials, in query : TaskQuery, in mapper : TaskMapper) : LinkedHashMap< String,  T >
        return queryForTaskPageableList(ctx, query, mapper).getTaskResults();
!!!201572.java!!!	getQueueServices() : BpmQueueServices
        return queueServices;
!!!201700.java!!!	setQueueServices(in pqueueServices : BpmQueueServices) : void
        this.queueServices = pqueueServices;
!!!201828.java!!!	getTaskServices() : BpmTaskServices
        return taskServices;
!!!201956.java!!!	setTaskServices(in ptaskServices : BpmTaskServices) : void
        this.taskServices = ptaskServices;
!!!202084.java!!!	getProcessServices() : BpmProcessServices
        return processServices;
!!!202212.java!!!	setProcessServices(in pprocessServices : BpmProcessServices) : void
        this.processServices = pprocessServices;
!!!202340.java!!!	getUserServices() : BpmUserGroupServices
        return userServices;
!!!202468.java!!!	setUserServices(in puserServices : BpmUserGroupServices) : void
        this.userServices = puserServices;
!!!202596.java!!!	getTibcoIpeServices() : TibcoProcessEngineServices
        return tibcoIpeServices;
!!!202724.java!!!	setTibcoIpeServices(in ptibcoIpeServices : TibcoProcessEngineServices) : void
        this.tibcoIpeServices = ptibcoIpeServices;
!!!202852.java!!!	getFilenetPeServices() : FilenetProcessEngineServices
        return filenetPeServices;
!!!202980.java!!!	setFilenetPeServices(in pfilenetPeServices : FilenetProcessEngineServices) : void
        this.filenetPeServices = pfilenetPeServices;
!!!203108.java!!!	getConnectionServices() : BpmConnectionServices
        return connectionServices;
!!!203236.java!!!	setConnectionServices(in pconnectionServices : BpmConnectionServices) : void
        this.connectionServices = pconnectionServices;
