class ReflectUtils
!!!244836.java!!!	inspect(in obj : Object) : String
        if (obj == null) {
            return null;
        }
        StringBuilder builder = new StringBuilder("\nInspect Bean [");
        try {
            builder.append(obj.getClass().getName());
            builder.append("]");
            for (Method m : obj.getClass().getMethods()) {
                // accessors have no parameters
                if (m.getParameterTypes().length == 0) {
                    // As most fields are private we must loop over getters
                    if (m.getName().startsWith("get") && !METHOD_GETCLASS.equals(m.getName())) {
                       builder.append("\n - field: \'");
                       builder.append(m.getName().substring(START_INDEX_GET, END_INDEX_GET).toLowerCase());
                       builder.append(m.getName().substring(END_INDEX_GET));
                       builder.append("\'\t value:\'" + m.invoke(obj, new Object[0]) + "\'");
                    }
                    if (m.getName().startsWith("is")) {
                        builder.append("\n - field: \'");
                        builder.append(m.getName().substring(START_INDEX_IS, END_INDEX_IS).toLowerCase());
                        builder.append(m.getName().substring(END_INDEX_IS));
                        builder.append("\'\t value:\'" + m.invoke(obj, new Object[0]) + "\'");
                     }
               }
            }
        } catch (Exception ex) {
            builder.append("ERROR inspecting bean.");
        }
        return builder.toString();
