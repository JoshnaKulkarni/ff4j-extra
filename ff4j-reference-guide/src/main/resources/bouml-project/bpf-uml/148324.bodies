class FieldHelper
!!!239332.java!!!	readFieldValue(in field : Field) : T
        return (T) field.getValue();
!!!239460.java!!!	readFieldListValue(in listTextField : Field) : List< T >
        List < T > values = new ArrayList < T >();
        if (listTextField.getValue() != null) {
            Object[] myArray = null;
            if (listTextField.isArray()) {
                myArray = ((Object[]) listTextField.getValue());
            } else {
                myArray = new Object[] {listTextField.getValue()};
            }
            for (Object object : myArray) {
                values.add((T) object);
            }
        }
        return values;
!!!239588.java!!!	createFieldList(in fieldName : String, in fieldType : BpmFieldType, in fieldValue : List< T >) : Field
        Field f = new Field(fieldName, fieldType, fieldValue.toArray(new Object[0]));
        f.setArray(true);
        return f;
!!!239716.java!!!	createFieldDateArray(in fieldName : String, in fieldValue : List< Date >) : Field
        return createFieldList(fieldName, BpmFieldType.TYPE_DATE, fieldValue);
!!!239844.java!!!	createFieldNumberArray(in fieldName : String, in fieldValue : List< Double >) : Field
        return createFieldList(fieldName, BpmFieldType.TYPE_NUMBER, fieldValue);
!!!239972.java!!!	createFieldTimeArray(in fieldName : String, in fieldValue : List< Date >) : Field
        return createFieldList(fieldName, BpmFieldType.TYPE_TIME, fieldValue);
!!!240100.java!!!	createFieldDateTimeArray(in fieldName : String, in fieldValue : List< Date >) : Field
        return createFieldList(fieldName, BpmFieldType.TYPE_DATETIME, fieldValue);
!!!240228.java!!!	createFieldTimeStampArray(in fieldName : String, in fieldValue : List< Long >) : Field
        return createFieldList(fieldName, BpmFieldType.TYPE_TIMESTAMP, fieldValue);
!!!240356.java!!!	createFieldBooleanArray(in fieldName : String, in fieldValue : List< Boolean >) : Field
        return createFieldList(fieldName, BpmFieldType.TYPE_BOOLEAN, fieldValue);
!!!240484.java!!!	createFieldTextArray(in fieldName : String, in fieldValue : List< String >) : Field
        return createFieldList(fieldName, BpmFieldType.TYPE_TEXT, fieldValue);
!!!240612.java!!!	createFieldDataArray(in fieldName : String, in fieldValue : List< String >) : Field
        return createFieldList(fieldName, BpmFieldType.TYPE_DATA, fieldValue);
!!!240740.java!!!	createFieldDate(in fieldName : String, in fieldValue : Date) : Field
        return new Field(fieldName, BpmFieldType.TYPE_DATE, fieldValue);
!!!240868.java!!!	createFieldTime(in fieldName : String, in fieldValue : Date) : Field
        return new Field(fieldName, BpmFieldType.TYPE_TIME, fieldValue);
!!!240996.java!!!	createFieldDateTime(in fieldName : String, in fieldValue : Date) : Field
        return new Field(fieldName, BpmFieldType.TYPE_DATETIME, fieldValue);
!!!241124.java!!!	createFieldTimeStamp(in fieldName : String, in fieldValue : Long) : Field
        return new Field(fieldName, BpmFieldType.TYPE_TIMESTAMP, fieldValue);
!!!241252.java!!!	createFieldBoolean(in fieldName : String, in fieldValue : Boolean) : Field
        return new Field(fieldName, BpmFieldType.TYPE_BOOLEAN, fieldValue);
!!!241380.java!!!	createFieldText(in fieldName : String, in fieldValue : String) : Field
        return new Field(fieldName, BpmFieldType.TYPE_TEXT, fieldValue);
!!!241508.java!!!	createFieldNumber(in fieldName : String, in fieldValue : Double) : Field
        return new Field(fieldName, BpmFieldType.TYPE_NUMBER, fieldValue);
!!!241636.java!!!	createFieldData(in fieldName : String, in fieldValue : String) : Field
        return new Field(fieldName, BpmFieldType.TYPE_TEXT, fieldValue);
!!!241764.java!!!	readFieldDate(in dateField : Field) : Date
        return readFieldValue(dateField);
!!!241892.java!!!	readFieldTime(in dateField : Field) : Date
        return readFieldValue(dateField);
!!!242020.java!!!	readFieldDateTime(in dateField : Field) : Date
        return readFieldValue(dateField);
!!!242148.java!!!	readFieldTimeStamp(in dateField : Field) : Long
        return readFieldValue(dateField);
!!!242276.java!!!	readFieldNumber(in dateField : Field) : Double
        return readFieldValue(dateField);
!!!242404.java!!!	readFieldBoolean(in dateField : Field) : Boolean
        return readFieldValue(dateField);
!!!242532.java!!!	readFieldText(in dateField : Field) : String
        return readFieldValue(dateField);
!!!242660.java!!!	readFieldData(in dateField : Field) : String
        return readFieldValue(dateField);
!!!242788.java!!!	readFieldNumberList(in listTextField : Field) : List< Double >
        return readFieldListValue(listTextField);
!!!242916.java!!!	readFieldTextList(in listTextField : Field) : List< String >
        return readFieldListValue(listTextField);
!!!243044.java!!!	readFieldTextArray(in listTextField : Field) : String
        return (String[]) listTextField.getValue();
!!!243172.java!!!	readFieldDataList(in listTextField : Field) : List< String >
        return readFieldListValue(listTextField);
!!!243300.java!!!	readFieldDateList(in listField : Field) : List< Date >
        return readFieldListValue(listField);
!!!243428.java!!!	readFieldDateTimeList(in listField : Field) : List< Date >
        return readFieldListValue(listField);
!!!243556.java!!!	readFieldTimeList(in listField : Field) : List< Date >
        return readFieldListValue(listField);
!!!243684.java!!!	readFieldTimeStampList(in listField : Field) : List< Date >
        return readFieldListValue(listField);
!!!243812.java!!!	readFieldBooleanList(in listField : Field) : List< Boolean >
        return readFieldListValue(listField);
!!!243940.java!!!	controlFieldType(in pField : Field) : void
        Object value = pField.getValue();
        BpmFieldType type = pField.getType();
        String name = pField.getName();
        if (value != null && type != null) {
            if (BpmFieldType.TYPE_NUMBER.getKey().equals(type.getKey()) && !(value instanceof Integer)
                    && !(value instanceof Integer[]) && !(value instanceof Double) && !(value instanceof Double[])) {
                throw new InvalidFieldTypeException(name, value.getClass().getName(),
                        BpmFieldType.TYPE_NUMBER.getKey());
            } else if (BpmFieldType.TYPE_TIMESTAMP.equals(type.getKey()) && !(value instanceof Long)
                    && !(value instanceof Long[])) {
                // long will be timestamp
                throw new InvalidFieldTypeException(name, value.getClass().getName(), BpmFieldType.TYPE_TIMESTAMP
                        .getKey());
            } else if (BpmFieldType.TYPE_DATA.getKey().equals(type.getKey()) && !(value instanceof String)
                    && !(value instanceof String[])) {
                // data will be String
                throw new InvalidFieldTypeException(name, value.getClass().getName(), BpmFieldType.TYPE_DATA.getKey());
            } else if (BpmFieldType.TYPE_DATE.getKey().equals(type.getKey()) && !(value instanceof Date)
                    && !(value instanceof Date[])) {
                // data will be String
                throw new InvalidFieldTypeException(name, value.getClass().getName(), BpmFieldType.TYPE_DATE.getKey());
            } else if (BpmFieldType.TYPE_TIME.getKey().equals(type.getKey()) && !(value instanceof Date)
                    && !(value instanceof Date[])) {
                // data will be String
                throw new InvalidFieldTypeException(name, value.getClass().getName(), BpmFieldType.TYPE_TIME.getKey());
            } else if (BpmFieldType.TYPE_DATETIME.getKey().equals(type.getKey()) && !(value instanceof Date)
                    && !(value instanceof Date[])) {
                // data will be String
                throw new InvalidFieldTypeException(name, value.getClass().getName(), BpmFieldType.TYPE_DATETIME
                        .getKey());
            } else if (BpmFieldType.TYPE_TEXT.getKey().equals(type.getKey()) && !(value instanceof String)
                    && !(value instanceof String[])) {
                // data will be String
                throw new InvalidFieldTypeException(name, value.getClass().getName(), BpmFieldType.TYPE_TEXT.getKey());
            } else if (BpmFieldType.TYPE_BOOLEAN.getKey().equals(type.getKey()) && !(value instanceof Boolean)
                    && !(value instanceof Boolean[])) {
                // data will be String
                throw new InvalidFieldTypeException(name, value.getClass().getName(), BpmFieldType.TYPE_BOOLEAN
                        .getKey());
            }
        }
