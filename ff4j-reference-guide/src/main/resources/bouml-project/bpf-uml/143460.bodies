class Accessors
!!!238692.java!!!	Accessors(in javaClass : Class< ? >)
        if (javaClass == null) {
            throw new IllegalArgumentException("JavaClass must not be null");
        }
        Method[] methods = javaClass.getMethods();
        // search over bean accessors.
        for (int i = 0; i < methods.length; i++) {
            // looking for getters
            if (!methods[i].getReturnType().equals(Void.TYPE) && methods[i].getParameterTypes().length == 0) {
                String currentClassPropertyName = "";
                if (methods[i].getName().startsWith("get")) {
                    currentClassPropertyName = methods[i].getName().substring("get".length());
                } else if (methods[i].getName().startsWith("is")) {
                    currentClassPropertyName = methods[i].getName().substring("is".length());
                }
                if (currentClassPropertyName.length() > 0) {
                    if (currentClassPropertyName.length() == 1) {
                        currentClassPropertyName = currentClassPropertyName.toLowerCase();
                    } else {
                        currentClassPropertyName = currentClassPropertyName.substring(0, 1).toLowerCase()
                                + currentClassPropertyName.substring(1);
                    }
                    if (methods[i].getExceptionTypes() != null && methods[i].getExceptionTypes().length != 0) {
                        throw new IllegalArgumentException(currentClassPropertyName
                                + " getter method mustn't throw exception");
                    }
                    getGetters().put(currentClassPropertyName, methods[i]);
                }
            } else if (methods[i].getName().startsWith("set") && methods[i].getReturnType().equals(Void.TYPE)
                    && methods[i].getParameterTypes().length == 1) {
                String currentClassPropertyName = methods[i].getName().substring("set".length());
                if (currentClassPropertyName.length() > 0) {
                    if (currentClassPropertyName.length() == 1) {
                        currentClassPropertyName = currentClassPropertyName.toLowerCase();
                    } else {
                        currentClassPropertyName = currentClassPropertyName.substring(0, 1).toLowerCase()
                                + currentClassPropertyName.substring(1);
                    }
                    if (methods[i].getExceptionTypes() != null && methods[i].getExceptionTypes().length != 0) {
                        throw new IllegalArgumentException(currentClassPropertyName
                                + " setter method mustn't throw exception");
                    }
                    getSetters().put(currentClassPropertyName, methods[i]);
                }
            }
        }
        getInstencePropertyNames().addAll(getGetters().keySet());
        getInstencePropertyNames().retainAll(getSetters().keySet());
!!!238820.java!!!	getGetters() : Map< String, Method >
        return getters;
!!!238948.java!!!	getSetters() : Map< String, Method >
        return setters;
!!!239076.java!!!	getInstencePropertyNames() : Collection< String >
        return instencePropertyNames;
