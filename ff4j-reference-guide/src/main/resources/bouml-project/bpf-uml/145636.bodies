class BpmQueueServicesMock
!!!210148.java!!!	retrieveQueue(in ctx : Credentials, in queueName : String) : Queue
        logger.debug("MOCK METHOD retrieveQueue");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notNull(queueName, "Param#1['queueName'] is required, cannot find queue without its name");
        Map < String, Queue > map = retrieveQueues(ctx).getQueueMap();
        Queue queue = map.get(queueName);
        if (queue == null) {
            throw new QueueNotFoundException(
                    "Even it's a mock please use one of the available NAME " +  map.keySet(), null, null);
        }
        return queue;
!!!210276.java!!!	retrieveQueues(in ctx : Credentials) : Queues
        logger.debug("MOCK METHOD retrieveQueues");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Map < String, Queue > map = new HashMap < String, Queue >();
        Queue sampleQueue1 = new Queue();
        sampleQueue1.setCustomProperties(new HashMap < String, String >());
        sampleQueue1.setDescription("Inbox Queue ");
        sampleQueue1.setName(ctx.getUserName());
        sampleQueue1.setId("1|Inbox|" + ctx.getUserName());
        sampleQueue1.setTaskCount(1);
        sampleQueue1.setGroup(false);
        Queue sampleQueue2 = new Queue();
        sampleQueue2.setCustomProperties(new HashMap < String, String >());
        sampleQueue2.setDescription("Inbox Queue");
        sampleQueue2.setName("Inbox");
        sampleQueue2.setId("Inbox" + ctx.getUserName());
        sampleQueue2.setTaskCount(1);
        sampleQueue2.setGroup(false);
        map.put(sampleQueue2.getId(), sampleQueue2);
        Queue sampleQueue3 = new Queue();
        sampleQueue3.setCustomProperties(new HashMap < String, String >());
        sampleQueue3.setDescription("Administrators Work Queue");
        sampleQueue3.setName("Administrators");
        sampleQueue3.setId("Admin");
        sampleQueue3.setTaskCount(1);
        sampleQueue3.setGroup(true);
        map.put(sampleQueue3.getId(), sampleQueue3);
        Queue sampleQueue4 = new Queue();
        sampleQueue4.setCustomProperties(new HashMap < String, String >());
        sampleQueue4.setDescription("Sample Lambda Group");
        sampleQueue4.setName("Lambda");
        sampleQueue4.setId("LambdaGrp");
        sampleQueue4.setTaskCount(1);
        sampleQueue4.setGroup(true);
        map.put(sampleQueue4.getId(), sampleQueue4);
        return new Queues(map);
!!!210404.java!!!	retrieveQueues(in ctx : Credentials, in queueNames : List< String >) : Queues
        logger.debug("MOCK METHOD retrieveQueues");
        Assert.notNull(ctx, "Param#0['Credentials'] - user credentials is required to connect to engine.");
        Assert.notNull(ctx.getUserName(), "Param#0['Credentials'] - Property['UserName'] is required");
        Assert.notEmpty(queueNames, "Param#2['queueNames'] is required, cannot filter without names");
        Map < String, Queue > map = retrieveQueues(ctx).getQueueMap();
        Map < String, Queue > results = new HashMap < String, Queue >();
        for (String currentQ : queueNames) {
            if (map.get(currentQ) != null) {
                results.put(currentQ, map.get(currentQ));
            } else {
                logger.warn(currentQ + " is an invalid name and will be ommitted");
            }
        }
        return new Queues(results);
