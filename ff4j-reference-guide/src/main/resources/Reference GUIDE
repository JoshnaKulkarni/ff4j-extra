Reference GUIDE
[Use docbook]

Table of content

========================
 I - Feature flipping 
========================	
 
 1.1 - Definition
 -------------------------------------------------------------------
 		QQQ  Enable & Disable Feature @ Runtime
 
 1.2 - Main Business Cases
 -------------------------------------------------------------------
 
  1.2.1 - Continuous Delivery
		QQQ Trunk base dev + Frequent release
  	 
  1.2.2 - Zero Downtime deployments
  	 	1.2.2.1 - Canary Release
		1.2.2.2 - Dark Launch
		1.2.2.3 - Blue Green deployment (warning)
		
  1.2.3 - Graceful degradation
		1.2.3.1 - Prioritize key functions
		1.2.3.2 - Prevent DDOS
		1.2.3.3 - Waiting Room
		
  1.2.4 - Hostile client deployment
		1.2.4.1 - Mobile (ex: facebook)
		1.2.4.2 - Ops team or heavy processes
	
  1.2.5 - Matchs Business Requirements
		1.2.5.1 - Business concerns like timescope
		1.2.5.1 - User préférences / Configuration

========================
 II - Core 
========================

 2.1 - Introduction to FF4J
 -------------------------------------------------------------------
  
  2.1.1 - Why this framework ?
 		   - Create a component with a if is easy but so much more than that
 		   - Togglz olready exist, pretty good but creating objec to be annotated
 		   - Open Source project
  
  2.1.2 - Objectives and usage
  		   - Single class to do anything you want on features, as spring bean.
  		   - if within code are dirty as you need to clean, use AOP
  		   - Provide nice console with minimum effort
  
  2.1.3 - Main concepts
  		2.1.3.1 - Feature
  			- unique identifier
  		2.1.3.2 - Feature Group
  			- unique groupName
  			- can be in a unique group, family, tag
  		2.1.3.3 - Feature Store
  		2.1.3.4 - FF4J
  
 2.2 - Getting Started
 -------------------------------------------------------------------
  
  2.2.1 - Hello World Sample
  
  2.2.2 - XML Configuration File
  		2.2.2.1 - XSD File
  		2.2.2.2 - Declare a feature
  		2.2.2.3 - Declare a feature group
  		2.2.2.4 - Example
  
  2.2.3 - InMemoryFeatureStore
  			- Configuration
  			- Runtime modifications
 
  2.2.4 - First concerns about monitoring
  
  2.2.5 - Integration with Spring Integration 
  
 2.3 - Aspect Oriented Programming
 -------------------------------------------------------------------
 
 	2.3.1 - Limits of conditional model
 	
 	2.3.2 - Working with aop
 		Spring AOP...
 		
 	2.3.3 - Sample
 
 2.4 - Security
 -------------------------------------------------------------------
 
  2.4.1 - Introduction & Purpose
  
  2.4.2 - Spring Security
  
 2.5 - Strategies
 -------------------------------------------------------------------
 
 	2.5.1 - Introduction & purpose
 		cinematic so far
 		
 	2.5.2 - Expression-based strategy
 	
 	2.5.3 - Ponderation strategy
 	
 	2.5.4 - IpClient strategy
 
 2.6 - Stores
 -------------------------------------------------------------------

   2.6.1 - Architecture Overview
		QQQ Externalize feature, statefulness, reuse within application
   
   2.6.2 - Jdbc Store
   		2.6.2.1 - DataBase Model
   		2.6.2.1 - JdbcFeatureStore
   		2.6.2.2 - FeatureStoreSpringJdbc
   		
   	2.6.3 - MongoDB Store
   		2.6.3.1 - Introduction to MongoDB
   		2.6.3.2 - Feature Format
   		2.6.3.3 - Sample code, declaration + usage
   		
   	2.6.4 - Redis Store
   		

 2.7 - Monitoring
 -------------------------------------------------------------------


===========================
 III - Web
===========================

 3.1 - Embedded console
 -------------------------------------------------------------------
 
   		3.1.1 - FF4JProvider
   		3.1.2 - Declaring Servlet
   		3.1.3 - Example

 3.2 - taglib
 -------------------------------------------------------------------
 
 3.3 - Restful api
 -------------------------------------------------------------------
 
 3.4 - StandAlone console
 -------------------------------------------------------------------
 
 3.4 - Javascript library
 -------------------------------------------------------------------

===========================
 IV - Extra
===========================

4.2 - J.M.X
-------------------------------------------------------------------

4.X Caching
-------------------------------------------------------------------

  4.X.1 - Architecture concerns
  	limit overhead, must be ondistributed if possible
  	
  4.X.2 - FeatureFacheProxy
  
  4.X.3 - Redis Cache
  
  4.X.4 - EhCache Cache
 
 4.4 - Tests
 -------------------------------------------------------------------


===========================
        APPENDIX
===========================

Source code