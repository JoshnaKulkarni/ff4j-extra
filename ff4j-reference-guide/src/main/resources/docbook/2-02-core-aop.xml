<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="2-02" lang="en">

  <title>Getting started</title>

  <para>This section will help you to make the framework works very fast without much effort. We will explain step by step
  the operations to set up your own application.</para>
  
  <section id="gettingstarted-sect-settings">   
      <title>Configurations</title>
        
        <para>
         Spring Framework is the frame of the component. Each service is a declared as spring Bean and they are all defined in a single XML file.
         A second file will contain configuration.
          <orderedlist>
     		<listitem>
     		 <para><classname>com/logica/bpm/applicationContext-bpmxml</classname></para>     		 
     		 <para>This file contains only service definitions. A bean for each service interface and a last one for
     		 	the <classname>BpmTemplate</classname>. But you should copy its contents in your own applications files.
     		 	It declared also aspect Oriented Programming bean. Those Advices are not required to make the service work but 
     		 	help to log, monitor and even handle failovers(s).
     		 </para>
     		</listitem>
     	 </orderedlist>
        </para>
        
        <para>
         It must contains a bean called <varname>bpf.connection.connectionFactory</varname>. It will create the connection. Using the JCA 1.5
         specification (connector-api.jar) we'll have to define a <classname>DataSource</classname>. In next releases, we might be able to package
         a RAR distribution and let the Application Server provides <classname>ConnectionFactory</classname>. We would declare only a JNDI resource
         as connection provider (same way as JDBC or JMS). It would be the BEST way to handle the environment settings.
        </para>
        
      <section id="gettingstarted-sect-settings-ipe">
	  	<title>iProcess Settings</title>
	  	<para>In the previous chapter, we introduced  xml settings files. We used a spring namespace (<varname>&lt;bpm:*&gt;</varname>) but it's
	  	not mandatory. Here the same configuration environment in the two ways.
	  	
	  	<orderedlist>
	  		<listitem>
	  			<para>Do not use namespace : Default beans configuration.</para>
	  			<para/>
	  			<programlisting language="xml">
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation=
		"http://www.springframework.org/schema/beans 
		  http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		 http://www.springframework.org/schema/util	
		  http://www.springframework.org/schema/util/spring-util.xsd">	
	
	<!-- Connection Factory Using DataSource and SsoFactories -->
	<bean id="bpf.connection.connectionFactory"
	  class="com.logica.tibco.ipe.jca.ProcessEngineConnectionFactory" >
	    <constructor-arg index="0" 		   ref="bpf.connection.metadata" 			 />
		<property name="ssoFactoryManager" ref="bpf.connection.ssoRmiFactoryManager" />
		<property name="dataSource" 	   ref="bpf.connection.datasource" 			 />
	</bean>
	
	<!-- MetaData about Connection Factory (JCA Specification) -->
	<bean id="bpf.connection.metadata"
	  class="com.logica.bpm.jca.cci.BpmResourceAdapterMetaData" >
		<property name="bpmVendorName"     value="TIBCO"           />
		<property name="bpmProductName"    value="iProcess Engine" />
		<property name="bpmProductVersion" value="11.0.1"          />
	</bean>
	
	<!-- Fail-Over and load balancing handler over ssoRmiFactory -->
	<bean id="bpf.connection.ssoRmiFactoryManager"
	   class="com.logica.bpm.jca.failover.ResourceManager" >
		<property name="mode" 					value="LOAD_BALANCING" />
		<property name="unavailabilityPeriod"	value="3600"           />
		<property name="resourceList"			ref="bpf.connection.ssoFactoryList" />
	</bean>
	
	<!-- Listing ssoRMIFactories in environnement, must be vector -->
	<util:list id="bpf.connection.ssoFactoryList" list-class="java.util.Vector">
		<ref bean="bpf.resource.ssoFactory1" />
		<ref bean="bpf.resource.ssoFactory2" />
	</util:list>
	
	<!-- SSOFactory as Managed Ressource -->
	<bean id="bpf.resource.ssoFactory1"
	  class="com.logica.bpm.jca.failover.ManagedRessource">
		<property name="priority" 		value="1" />
		<property name="defaultWeigth"  value="50" />
		<property name="ressource">
			<bean class="bpm.tibco.ipe.jca.SsoRmiFactoryResource">
				<property name="id" 	
				  value="SSO_JNDI_BINDING_NAME_2" />
				<property name="clazz" 	
				  value="com.sun.jndi.rmi.registry.RegistryContextFactory" />
				<property name="url"	
				  value="rmi://SERVER_RMI_IP:SERVER-RMI_PORT" />
			</bean>
		</property>
	</bean>	
	
	<!-- SSOFactory as Managed Ressource -->
	<bean id="bpf.resource.ssoFactory2" class="com.logica.bpm.jca.failover.ManagedRessource">
		<property name="priority" 		value="1" />
		<property name="defaultWeigth"  value="50" />
		<property name="ressource">
			<bean class="bpm.tibco.ipe.jca.SsoRmiFactoryResource">
				<property name="id" 	
				  value="SSO_JNDI_BINDING_NAME_2" />
				<property name="clazz" 	
				  value="com.sun.jndi.rmi.registry.RegistryContextFactory" />
				<property name="url"	
				  value="rmi://SERVER_RMI_IP:SERVER-RMI_PORT" />
			</bean>
		</property>
	</bean>	
		 
	<!-- DataSource define environment settings JCA Specification) -->
	<bean id="bpf.connection.datasource"
	  class="com.logica.tibco.ipe.domain.meta.DataSource">
		<property name="settings" 			ref="bpf.settings"		 /> 
		<property name="serverHost" 		value="IPE_SERVER_HOST"  />
		<property name="connectionPort"		value="IPE_SERVER_PORT"  />
		<property name="nodeName"			value="IPE_NODENAME"   	 />
		<property name="useDirector"		value="false" 		     />
		<property name="rmiLogActive" 		value="true"		     />
		<property name="rmiLogDirectory" 	value="/apps/wrt/Logica" />
		<property name="rmiLogFileName"     value="bpf-log-dev"      />
		<property name="rmiLogLevel" 		value="INFO"	     	 />
		<property name="rmiLogMaxSize"		value="5" 			     />
		<property name="locale"   			ref="bpf.locale.fr" 	/>
	 	<property name="maxConnections"  	value="0"        		/>
	 	<property name="modeTest" 		 	value="false" 		 	/>
	 	<property name="errorBundleName" 	value="error-messages" />
	 	<property name="mode" 				value="ssormi" />
	</bean>
	 
	<!-- locales definitions -->
	<bean id="bpf.locale.fr" class="java.util.Locale">
	 <constructor-arg value="fr" />
	</bean>
	<bean id="bpf.locale.en" class="java.util.Locale">
		<constructor-arg value="en" />
	</bean>

</beans>
]]>
	  			</programlisting>
	  	</listitem>
	  	
	  	<listitem>
	  	 <para>Use namespace : Less verbose</para>
	  	 <para/>	  	
	  			
       <programlisting language="xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:bpm="http://www.logica.com/schema/bpm"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation=
		"http://www.springframework.org/schema/beans
		 http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		 http://www.logica.com/schema/bpm            ./bpm-tags.xsd"&gt;
	&lt;bpm:connection-factory id="bpf.connection.connectionFactory" &gt;	
		
		&lt;!-- Product Settings for JCA Specification --&gt;
		&lt;bpm:provider company="TIBCO" product="iProcessEngine" version="11.0.1" /&gt; 
 		
 		&lt;!-- Set up Server --&gt;
		&lt;bpm:datasource host="IPE_SERVER_HOST" mode="ssormi"
		    node="IPE_NODENAME" port="IPE_SERVER_PORT" use-director="false"
		    rmiLogActive="false/true" testmode="false" locale="bpf.locale.fr" /&gt;					  									
		
		&lt;!-- Set up rmiregistries to acces ssormi api --&gt;
		&lt;bpm:ssofactories mode="LOAD_BALANCING" unavailability-period="3600"&gt;
        	&lt;bpm:ssofactory id="SSO_JNDI_BINDING_NAME_1"	priority="1"
        		percent-of-use="50"
			    clazz="com.sun.jndi.rmi.registry.RegistryContextFactory"
        		rmi-server="rmi://SERVER_RMI_IP:SERVER-RMI_PORT" /&gt;
        		
        	&lt;bpm:ssofactory id="SSO_JNDI_BINDING_NAME_2"	priority="1"
        		percent-of-use="50"
			    clazz="com.sun.jndi.rmi.registry.RegistryContextFactory"
        		rmi-server="rmi://SERVER_RMI_IP:SERVER-RMI_PORT" /&gt;
		&lt;/bpm:ssofactories&gt;
		
	&lt;/bpm:connection-factory&gt;	
&lt;/beans&gt;
</programlisting>	  	
	  	
	  	</listitem>
	   </orderedlist>
	  </para>
  
	  <!-- Table to define ipe settings details -->
	  <table id="table-ipe-settings">
         <title>Further explanations for those settings variables</title>
         <tgroup cols="3">
        <thead>
         <row>
          <entry>Property Name</entry>
          <entry>Description</entry>
          <entry>Values</entry>
         </row>
         </thead>
          <tbody>
         <row>
          <entry><varname>company</varname></entry>
          <entry>Anything you like, it's will be a label in the log file to help you know which
          		 implementation you are working.
          </entry>
          <entry>TIBCO, FILENET, JBOSS etc.</entry>
         </row>
         <row>
          <entry><varname>product</varname></entry>
          <entry>Anything you like, it's will be a label in the log file to help you know which
          		 implementation you are working.
          </entry>
          <entry>iProcess, P8, JBpm, etc.</entry>
         </row>
         <row>
          <entry><varname>version</varname></entry>
          <entry>Anything you like, it's will be a label in the log file to help you know which
          		 implementation you are working.
          </entry>
          <entry>11.0.0 4.5.1 </entry>
         </row>
         <row>
          <entry><varname>host="IPE_SERVER_HOST"</varname></entry>
          <entry>The IP or the network machine name of your bpm engine host</entry>
          <entry>127.0.0.1, vm-ipe, 192.168.0.144</entry>
         </row>
         <row>
          <entry><varname>mode="ssormi"</varname></entry>
          <entry>Use the two different ways to connect to the TIBCO engine.</entry>
          <entry>
          	<para>ssormi or jbase</para>
	        <para>To use jbase mode you must add correct native libraries (so, dll) to your Java Library Path.</para>
         </entry>
         </row>
         <row>
          <entry><varname>node="IPE_NODENAME"</varname></entry>
          <entry>Tibco iProcess node name.</entry>
          <entry>staff_nod1, swnode01, dummynode</entry>
         </row>
         <row>
          <entry><varname>port="IPE_SERVER_PORT"</varname></entry>
          <entry>Tibco iProcess connection port (SPO TCP Port or DIRECTOR TCP port if <varname>userDirector</varname> is set to true.</entry>
          <entry>10002, 55812 etc</entry>
         </row>
         <row>
          <entry><varname> use-director="false"</varname></entry>
          <entry>Tell if you want to connect through Director Service and directly to SPO. Director is an embedded load balancer for several
            SPO services.</entry>
          <entry>true or false</entry>
         </row>
         <row>
          <entry><varname>rmiLogActive="false"</varname></entry>
          <entry>Activate RMI logger on server. (mostly debugging tool).</entry>
          <entry>true or false</entry>
         </row>
         <row>
          <entry><varname>testmode="false"</varname></entry>
          <entry>
          	When you work with <varname>UNRELEASED</varname> procedures the tasks are created in test queues (and not released queues).
          	Enable test mode only if you attend to test a procedure with the framework.
          </entry>
          <entry>true or false</entry>
         </row>
         <row>
          <entry><varname>locale="bpf.locale.fr"</varname></entry>
          <entry>Wich Locale to use to error messages         	
          </entry>
          <entry>
          	Bean reference of type <classname>java.util.Locale</classname>. You must have the correct error message property file
            available in your classpath.</entry>
         </row>
         <row>
          <entry><varname>mode="LOAD_BALANCING"</varname></entry>
          <entry>Several resource SSO are available. Load-Balanced mode (could be ROUND_ROBIN, PRIORITY_FIRST)         	
          </entry>
          <entry>LOAD_BALANCING is yet the only available mode.</entry>
         </row>
         <row>
          <entry><varname>unavailability-period="3600"</varname></entry>
          <entry>Time (in seconds) as the resource is unavailable. We this time is up a new try
          is made. If the resource is still KO no change, but if the resource is available again it will
          retrieve its initial weight (in load balancing).
          </entry>
          <entry>600 (10 minutes), 1800...</entry>
         </row>
         <row>
          <entry><varname>id="SSO_JNDI_BINDING_NAME_1"</varname></entry>
          <entry>Binding ssoServerFactory identifier in RMI REGISTRY. 
          </entry>
          <entry>ssoServerFactory, ssoServerFactory2</entry>
         </row>
         <row>
          <entry><varname>priority="1"</varname></entry>
          <entry>ssoServerFactory priority, the resources are sorted by priority in the resource manager.
          </entry>
          <entry>integer above 0 : 1, 2, n</entry>
         </row>
         <row>
          <entry><varname>percent-of-use="50"</varname></entry>
          <entry>ssoServerFactory weight in load-balancing (here 50%).
          </entry>
          <entry>
          	<para>Integer between 1 and 100.</para> 
          	<para>The sum of all weight must be .... 100 (yes you're quite attentive)</para>
          </entry>
         </row>
         <row>
          <entry><varname>clazz="..."</varname></entry>
          <entry>rmi lookup implementation class.</entry>
          <entry>check Tibco iProcess documentation to get values</entry>
         </row>
         <row>
          <entry><varname>rmi-server="..."</varname></entry>
          <entry>rmi registry server url.</entry>
          <entry>url with the following pattern : rmi://rmiserver:rmiport.</entry>
         </row>
         </tbody>
         </tgroup>
       </table>	  
	  	
	  	 
	  </section>
	  <section id="gettingstarted-sect-settings-p8">
	  	<title>P8 Settings</title>
	  	<para>
	  	 The “applicationContext-settings.xml” must exist in the classpath of your project: this file contains 
	  	 the list of XML resource files required to connect to a P8 environment.
	  	</para>
	  	
	  	<programlisting language="xml">
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation=
		"http://www.springframework.org/schema/beans 
		  http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		 http://www.springframework.org/schema/util	
		  http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- Connection Factory Using DataSource and SsoFactories -->
	<bean id="bpf.connection.connectionFactory"
	  class="com.logica.filenet.p8.jca.ProcessEngineConnectionFactory" >
	    <constructor-arg index="0" 		   ref="bpf.connection.metadata" 			 />
		<property name="dataSource" 	   ref="bpf.connection.datasource" 			 />
	</bean>

	<!-- MetaData about Connection Factory (JCA Specification) -->
	<bean id="bpf.connection.metadata" 
	  class="com.logica.bpm.jca.cci.BpmResourceAdapterMetaData" >
		<property name="bpmVendorName"     value="IBM Filenet"           />
		<property name="bpmProductName"    value="P8 Process Engine" />
		<property name="bpmProductVersion" value="4.5.1"          />
	</bean>

	<!-- DataSource - JCA Specification) -->
	<bean id="bpf.connection.datasource" 
		class="com.logica.filenet.p8.domain.meta.DataSourceP8">
		<property name="applicationServerType"	 value="weblogic"  />
		<property name="bootstrapCEURI"  		 value="t3://p8server:7001/FileNet/Engine"   />
		<property name="connectionPointName"	 value="CP1"     />
		<property name="jaasConfigPath"	 		 value="D:/ jaas.conf.WebLogic"  />
		<property name="namingFactoryInitial"	 value="weblogic.jndi.WLInitialContextFactory"  />
		<property name="rosterName" 			 value="DefaultRoster"  />
		<property name="appSpaceName" 			 value="DefaultApplication"  />
		<property name="ldapUrl" 				 value="ldap://p8server:389"  />
		<property name="ldapSearchBase" 		 value="CN=Users,DC=p8domain,DC=com"  />
		<property name="ldapUser" 				 value="p8admin"  />
		<property name="ldapPassword" 			 value="password"  />
	</bean>
</beans>
]]>	  	
	  	</programlisting>
	  	
	  	<para>A resource file to connect to a P8 environment must contains a bean named <varname>bpf.connection.datasource</varname>
	  	in which the parameters of the connection are specified.
	  	</para>
	  	
	    <!-- Table to define ipe settings details -->
	    <table id="table-p8-datasource-settings">
         <title>Field Details for P8 Datasource</title>
         <tgroup cols="3">
         <thead>
         <row>
          <entry>Porperty Name</entry>
          <entry>Description</entry>
          <entry>Values</entry>
         </row>
         </thead>
          <tbody>
         <row>
          <entry><varname>applicationServerType</varname></entry>
          <entry>Type of Application server used by the P8 environment
          </entry>
          <entry>“was” (for WebSphere Application Server),“weblogic”,“jboss”</entry>
         </row>
         <row>
          <entry><varname>bootstrapCEURI</varname></entry>
          <entry>Content Engine bootstrap URI (URL to connect to the CE)</entry>
          <entry>t3://p8server:7001/FileNet/Engine</entry>
         </row>
         <row>
          <entry><varname>connectionPointName</varname></entry>
          <entry>Name of the connection point to the isolated region</entry>
          <entry>CP1</entry>
         </row>
         <row>
          <entry><varname>jaasConfigPath</varname></entry>
          <entry>Absolute path to the jaas configuration file</entry>
          <entry>“D:\\jaas.conf.WebLogic”</entry>
         </row>
         <row>
          <entry><varname>namingFactoryInitial</varname></entry>
          <entry>Java class used for the naming. Depends on the application server used</entry>
          <entry>
           <para>“com.ibm.websphere.naming. WsnInitialContextFactory”(WebSphere)</para>
           <para>"weblogic.jndi. WLInitialContextFactory" (WebLogic)</para>
           <para>“org.jnp.interfaces. NamingContextFactory” (JBoss)</para>
          </entry>
         </row>
         <row>
          <entry><varname>rosterName</varname></entry>
          <entry>Name of the FileNet roster to be used by the framework</entry>
          <entry>DefaultRoster</entry>
         </row>
         <row>
          <entry><varname>appSpaceName</varname></entry>
          <entry>Name of the FileNet application to be used by the framework (used by inbaskets and roles)</entry>
          <entry>DefaultApplication</entry>
         </row>
         <row>
          <entry><varname>ldapUrl</varname></entry>
          <entry>URL to access to the LDAP</entry>
          <entry>ldap://p8server:389</entry>
         </row>
         <row>
          <entry><varname>ldapSearchBase</varname></entry>
          <entry>LDAP search base</entry>
          <entry>CN=Users,DC=p8domain,DC=com</entry>
         </row>
         <row>
          <entry><varname>ldapUser</varname></entry>
          <entry>User login to be used for LDAP searches</entry>
          <entry>HomerSimpson</entry>
         </row>
         <row>
          <entry><varname>ldapPassword</varname></entry>
          <entry>User password to be used for LDAP searches</entry>
          <entry>JDOIJZOIJD3##jdsq;%%?dezk</entry>
         </row>
         <row>
          <entry><varname>sasClientPath</varname></entry>
          <entry>Absolute path to a properly configured sas.client.props file (WebSphere only)</entry>
          <entry>D:\\sas.client.props</entry>
         </row>
         <row>
          <entry><varname>sslClientPath</varname></entry>
          <entry>Absolute path to a properly configured ssl.client.props file (WebSphere 6 and more only)</entry>
          <entry>D:\\ssl.client.props</entry>
         </row>
          <row>
          <entry><varname>providerURL</varname></entry>
          <entry>Provider URL for the application server used by the Content Engine</entry>
          <entry>corbaloc:iiop:p8server:2809</entry>
         </row>
         </tbody>
         </tgroup>
         </table>
         
	  	<table id="table-p8-commons-settings">
         <title>Commons Framework Details</title>
         <tgroup cols="3">
        <thead>
         <row>
          <entry>Porperty Name</entry>
          <entry>Description</entry>
          <entry>Values</entry>
         </row>
         </thead>
          <tbody>
         <row>
          <entry><varname>company</varname></entry>
          <entry>Anything you like, it's will be a label in the log file to help you know with which
          		 implementation you are working.
          </entry>
          <entry>TIBCO, FILENET, JBOSS etc.</entry>
         </row>
         <row>
          <entry><varname>product</varname></entry>
          <entry>Anything you like, it's will be a label in the log file to help you know with which
          		 implementation you are working with.
          </entry>
          <entry>iProcess, P8, JBpm, etc.</entry>
         </row>
         <row>
          <entry><varname>version</varname></entry>
          <entry>Anything you like, it's will be a label in the log file to help you know with which
          		 implementation you are working with.
          </entry>
          <entry>11.0.0 4.5.1 </entry>
         </row>
         </tbody>
         </tgroup>
         </table>
	  	
	  </section>    
  </section>
  
  <section id="gettingstarted-sect-conn">  
      <title>Connection Services</title>
      
      <para>To connect to BPM Engines we will implement the J2EE JCA Connector. Every connection operation used by other services
      are declared in <classname>com.logica.bpm.services.BpmConnectionServices</classname>.</para>
      
      <section id="gettingstarted-sect-conn-uml">
       <title>Service overview</title>
        
        <para>
       	 <figure id="fig-classdiagram-services-connection" floatstyle="center">
      	 <title>Connection service UML model</title>
      	 <mediaobject>
       	  <imageobject role="web">
           <imagedata align="center" fileref="figures/fig-classdiagram-services-connection.png" width="80%"/>
          </imageobject>
         </mediaobject>
     	</figure>
       	 </para>
       	 
       	 <para>
       	  The connection is provided by using a set a few classes :
       	   <variablelist>
      		<varlistentry>
        		<term><classname>com.logica.bpm.jca.cci.BpmJcaCredentials</classname></term>
       			<listitem>
       			<para>
       				It implements the JCA <classname>ConnectionSpec</classname> interface, it's the
       				bean which storing user credentials.</para>
       			</listitem>
      		</varlistentry>
      		<varlistentry>
        		<term><classname>com.logica.bpm.jca.cci.BpmResourceAdapterMetaData</classname></term>
       			<listitem>
       			<para>
       				It implements the JCA <classname>ResourceAdapterMetaData</classname> interface, it's the
       				bean which storing bpm engine meta data such as product name or product version.
       			</para>
       			</listitem>
      		</varlistentry>
      		<varlistentry>
        		<term><classname>com.logica.bpm.jca.cci.BpmConnection</classname></term>
       			<listitem>
       			<para>
       				It implements the JCA <classname>javax.resource.cci.Connection</classname> interface, it's the
       				bean which store the opened session and any object related to the target Bpm Engine.
       			</para>
       			</listitem>
      		</varlistentry>
      		<varlistentry>
        		<term><classname>com.logica.bpm.jca.BpmDataSource</classname></term>
       			<listitem>
       			<para>
       				It implements the SQL <classname>javax.sql.DataSource</classname> interface, it's the
       				bean which store the environnment settings and provide <classname>BpmConnection</classname> from
       				credentials.
       			</para>
       			</listitem>
      		</varlistentry>
      	    </variablelist>
       	 </para>
       	 
       	 <para>
       	 <figure id="fig-classdiagram-connection" floatstyle="center">
      	 <title>JCA implementation for the framework</title>
      	 <mediaobject>
       	  <imageobject role="web">
           <imagedata align="center" fileref="figures/fig-classdiagram-connection.png" width="80%"/>
          </imageobject>
         </mediaobject>
     	</figure>
       	 </para>
       	 
       	 <para>
           The BPM framework offers two connection modes: one is stateless and a new connection is opened
           and closed at each call to the framework. The other one is statefull and it reuses opened connections.
       	 </para>
       
       	 </section>
       	
        
      
       <section id="gettingstarted-sect-conn-stateless">
       	<title>Stateless Session Management</title>
       	<para>
       	Service Statelessness is one of eight design principles that are part of the service-orientation design paradigm.
		The official definition for this principle states the following:
		<citation>"Services minimize resource consumption by deferring the management of state information when necessary." </citation>
		</para>
		
		<figure id="fig-conn-stateless" floatstyle="center">
      	 <title>Stateless Session Management</title>
      	 <mediaobject>
       	  <imageobject role="web">
           <imagedata align="center" fileref="figures/fig-connstateless.png" width="80%"/>
          </imageobject>
         </mediaobject>
     	</figure>
       
       	<programlisting language="java">
Credentials credential = new Credentials(“user”, “password”);
getQueueServices().retrieveQueues(credential);
       	</programlisting>
       </section>
       
       <section id="gettingstarted-sect-conn-statefull">
        <title>Stateful Session Management</title>
       	 <para>
       	  We have to use connection specific service. First a login call will create session that will be 
       	  stored in a manager (storing policy is important here : defining time to live, timeout or max pool size). 
       	  The output of <methodname>login()</methodname>	 operation will be a token. At any time the Connection Handler can
       	  associate open session and tokens using a storage table (<classname>Map</classname>).
       	</para>    		
       	
       	<para>
		 <figure id="fig-conn-statefull" floatstyle="center">
      	  <title>Statefull principle</title>
      	  <mediaobject>
       	   <imageobject role="web">
            <imagedata align="center" fileref="figures/fig-connstatefull.png" width="80%"/>
           </imageobject>
          </mediaobject>
     	 </figure>
     	</para>
     	     		
       	<para>
       	 The main evident advantage is that you can reuse connections and make your application faster if you need to make several
       	 calls on the same screen. But there are many drawbacks and that's why you have to know exactly what you do. 
       	 The less you use the statefull principle, the better it is.
       	 <itemizedlist>
           <listitem>
       		<para>YOU HAVE TO close your session. (don't expect your user to click disconnect before closing your application
       		think about a simple click on the cross on top of the windows, what about a httpFilter instead ?). Don't forget
       		to close sessions even when error occurred using finally bloc for instead. (considered yourself as warned !!)</para>       		
      	   </listitem>
      	   <listitem>
      	   	<para>YOU CAN'T USE CLUSTERS OR DISTRIBUTED ARCHITECTURES (you can if, and only if, you handle session affinities
      	   	but it's not the subject here). Just think about it : you connect your client using a node and get a token, fine. Let's assume
      	   	now that you try to use your token on a different node what will happened ? As the two different nodes does not use the same
      	   	Java Virtual Machine, the Connection Handler is not the same and your token won't be checked valid.
      	    </para>
      	   </listitem>
      	    <listitem>
      	   	<para>YOU have to SET UP : max concurrent sessions (the memory print could be too important and you would got 
      	   	<classname>OutOfMemory</classname> errors.), session timeout (same value as http timeout session should not be a
      	   	bad choice.)
      	    </para>
      	   </listitem>
      	</itemizedlist>
       </para>
       
       <para>Here a sample of how to use stateful system : use this at your own risk.(cheers)</para>
       <para/>
       <programlisting language="java">
// Create a bean for caring credentials information
Credentials statefullCred = new Credentials("user", "password");

// Here get Token ID from couple login and password. Note that openedSession is no more a bean caring
// user login and user password but user login and TOEKNID. 
Credentials openedSession = connServices.login(statefullCred);

// call 1
getQueueServices().retrieveQueues(credential);

// call 2
getUserServices().isUserExist(openedSession, "User1"));

// logoff
connServices.logoff(openedSession);       
       </programlisting>  
       </section>
       
  </section>

  
  <section id="gettingstarted-sect-queue">
      <title>WorkQueue Services</title>
        
        <para>
       	 <figure id="fig-classdiagram-queue" floatstyle="center">
      	 <title>UML service model overview.</title>
      	 <mediaobject>
       	  <imageobject role="web">
           <imagedata align="center" fileref="figures/fig-classdiagram-services-queue.png" width="80%"/>
          </imageobject>
         </mediaobject>
     	</figure>
       </para>
       	 
      <para>The <classname>com.logica.bpm.services.BpmQueueServices</classname> provides functions to work with Work Queue. Once its connected a user
      will display the list of available WorkQueues. For each it would like to list the current activities (as a mailbox) and sort them to retrieve,
      for example, the urgent ones or the ones with a high priority.
      </para>
      
      <para>
      <programlisting language="java">
// Retrieve every queues for a use
Credentials dummyUser = new Credentials("USER_LOGIN", "USER_PASSWORD");
Queues userQueues = getBpmTemplate().getQueueServices().retrieveQueues(dummyUser);
// Each user has a personal queue often called 'inbox'
Queue inBox = getBpmTemplate().getQueueServices().retrieveQueue(dummyUser, "USER_LOGIN");
	  </programlisting>      
      </para>      
      
  </section>
    
  <section id="gettingstarted-sect-task">  
      <title>Task (Activity) Services</title>
      
	<para>
       	 <figure id="fig-classdiagram-task" floatstyle="center">
      	 <title>UML service model overview.</title>
      	 <mediaobject>
       	  <imageobject role="web">
           <imagedata align="center" fileref="figures/fig-classdiagram-services-task.png" width="80%"/>
          </imageobject>
         </mediaobject>
     	</figure>
       </para>
	  
	    <para>
	    The <classname>com.logica.bpm.services.BpmTaskServices</classname> provides functions to work with Activities (Task). Once its connected a user
      	will display the list of available task in a WorkQueue, work with them (lock, save ,complete, forward, fill form etc.). 
      	</para>
      
      <para>
      <programlisting language="java">
// Create credentials
Credentials dummyUser = new Credentials("USER_LOGIN", "USER_PASSWORD");
// Initializd Query in a queue
TaskQuery taskQuery = new TaskQuery("USER_LOGIN");
taskQuery.setPageable(false);
taskQuery.setMaxresult(3);

// Sample limit fields to retrieve
List &lt; String &gt; fieldToDisplayinQueuePage = new ArrayList &lt; String &gt;();
fieldToDisplayinQueuePage.add("CAPTAIN_AGE");
fieldToDisplayinQueuePage.add("CREW_NUMBER");
taskQuery.setFieldNames(fieldToDisplayinQueuePage);

// Sample filter
taskQuery.setQueryExpression("STEPNAME = ? AND DEADLINE &lt; ?");
taskQuery.setQueryParameters(new Object[] {"checkin", new Date()});
		
// Sample Sort
SortCriterion sc = new SortCriterion();
sc.setFieldName("CREATE_DATE");
sc.setFieldType(BpmFieldType.TYPE_DATE);
sc.setAscending(true);

TaskResultSet userTasks = getBpmTemplate().getTaskServices().searchTasks(USER, taskQuery);
	  </programlisting>      
      </para>
  </section>

  <section id="gettingstarted-sect-rpocess">  
      <title>Process (Workflow) Services</title>
      <para>
       	 <figure id="fig-classdiagram-process" floatstyle="center">
      	 <title>UML service model overview.</title>
      	 <mediaobject>
       	  <imageobject role="web">
           <imagedata align="center" fileref="figures/fig-classdiagram-services-process.png" width="80%"/>
          </imageobject>
         </mediaobject>
     	</figure>
       </para>
	  
	    <para>
	    The <classname>com.logica.bpm.services.BpmProcessServices</classname> provides functions to work with Processes (Workflow). Once its connected a user
      	will search for process, display fieldvalues and current state, trigger events through the workflow etc. 
      	</para>
      
      <para>
      <programlisting language="java">
		// Create credentials
Credentials dummyUser = new Credentials("USER_LOGIN", "USER_PASSWORD");
com.logica.bpm.domain.Process myProcess = getBpmTemplate().getProcessServices().retrieveProcess(dummyUser, "PROCNAME", "2393", false);      
      </programlisting>
      </para>
   </section>
  
  <section id="gettingstarted-sect-user">  
      <title>User (Administration) Services</title>
      <para>
       	 <figure id="fig-classdiagram-user" floatstyle="center">
      	 <title>UML service model overview.</title>
      	 <mediaobject>
       	  <imageobject role="web">
           <imagedata align="center" fileref="figures/fig-classdiagram-services-user.png" width="80%"/>
          </imageobject>
         </mediaobject>
     	</figure>
       </para>
	  
	    <para>
	    The <classname>com.logica.bpm.services.BpmUserGroupServices</classname> provides functions to work with User and groups. Once its connected a administrator 
	    user will search for user and group but can also check existence or create new. 
      	</para>
      
      <para>
      <programlisting language="java">
		// Create credentials
Credentials adminUser = new Credentials("USER_LOGIN", "USER_PASSWORD");
boolean isBarakExist = getBpmTemplate().getUserGroupServices.isUserExist(adminUser, "chubaka");
if (!isBarakExist) {
	User newUser = new User();
	newUser.setLogin("chubaka");
    newUser.setDescription("Strong Wookie");
    newUser.setEmail("wookie.chubaka@mycompany.com")
	getBpmTemplate().getUserGroupServices.createUser(adminUser, newUser);
}      </programlisting>
      </para>
      	  
  </section>
  
   <section id="gettingstarted-sect-custom">  
      <title>Bpm Specific Engine</title>
       <para>
       	 <figure id="fig-classdiagram-ipe" floatstyle="center">
      	 <title>UML service model overview for ipe</title>
      	 <mediaobject>
       	  <imageobject role="web">
           <imagedata align="center" fileref="figures/fig-classdiagram-services-ipe.png" width="80%"/>
          </imageobject>
         </mediaobject>
     	</figure>
       </para>
       
        <para>
       	 <figure id="fig-classdiagram-p8" floatstyle="center">
      	 <title>UML service model overview for p8</title>
      	 <mediaobject>
       	  <imageobject role="web">
           <imagedata align="center" fileref="figures/fig-classdiagram-services-p8.png" width="80%"/>
          </imageobject>
         </mediaobject>
     	</figure>
       </para>	 
  </section>
   
</chapter>
